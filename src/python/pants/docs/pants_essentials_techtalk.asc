= The Pants Build System

////
Use https://github.com/twitter/cdk to generate this deck.
////

== Overview

Today we're learning the _essentials_. Practical knowledge that will help you _get stuff done_.

****
* press 'S' to show/hide these speaker notes
* We assume you use Pants, but don't necessarily understand what you're doing.
* So we'll ask -- why are you here, what specifically do you want to know about?
* Quick review of what build systems do, and what they don't do.
****


== Why Pants?

* Build system that _scales_.
* Put all code in a single repo; choose what you want to build
* Simplifies dependency management by _eliminating versions for internal sources_.

* `BUILD` files define **Targets** - "nouns" describing things that can be built.
* Pants provides **Goals** - "verbs" defining things the system can do.

****
* first points: basic workspace layout
* last points: general concepts to make it work
****

== What Pants Does

* You Tell Pants: "apply *these* goals to *those* targets"

* Pants analyzes: examines your target & its dependencies

* Pants plans: "download jars, generate code, compile, test"

* Pants invokes: Downloaders, Generators, Compilers, testers, ...


== Targets: "Nouns" of Build

["graphviz"]
----
include::targets_graph.dot['Example Targets Graph']
----

****
* Targets describe things that can be built.
* Target roughly corresponds to a dir of code.
* They're typed.
* They typically have dependencies; form a DAG.
* Each language has its own types: `java_library` _vs_ `python_library`
****

== Goals: "Verbs" of Build

["graphviz"]
----
include::goals_graph.dot['Example Goals Graph']
----

(abridged visualization of `./pants test`)

****
* Walk though the diagram, starting from test, to the left.
* You give Pants one or more goals, like `test`
* Within a goal might be a few tasks. E.g., `test` has `junit`, `pytest`.
* Many tasks are no-ops. E.g., `pytest` for java code.
* One task can require the product of another. E.g., `junit` needs classes from `jvm` compile.
* give a demo of ./pants -e test ?
****

== Let's Walk Through a Build

[source,bash]
  ./pants test tests/java/shapes/polygons/octagon

["graphviz"]
----
include::goals_graph_test.dot['Sorted Goals Graphs']
----

["graphviz"]
----
include::targets_graph_test.dot['Targets Graph']
----

****
* Pants works: for each goal, crawls the graph from bottom -> up
* `gen` sees our thrift, generates Java.
* `resolve` fetches jars from maven repo
* `compile` compiles our source, plus generated from thrift
* `test` runs tests
****

== Anatomy of a Command Line

----
./pants goalname [flags] path/to/target/foo
----

----
./pants goals
----

----
./pants mygoal -h
----

****
* Command lines specify one or more goals, one or more targets, and options.
* How'd we know that target's name is foo? We look in that BUILD file...
****

== Targets

Here's a simple library target. You might find this in +src/java/com/mycom/foo/BUILD+.

[source,python]
----
java_library(name='foo',
  dependencies=[
    '3rdparty/jvm:guava',
    'src/java/com/mycom/bar/common',
  ],
  sources=globs('*.java'),
)
----

****
* That "3rdparty" looks weird, we'll see more about that later.
* Mostly true: for each source file, only one target can own it
****

== Writing a `BUILD`

[source,python]
----
java_library( # choose target type
  name='foo', # same name as dir is good
  dependencies=[ ... ], # grep 'import' *
  sources=globs('*.java'))
----

****
* Many target types, but don't worry: few per language
* name: same as dir. (alas, choosing name for dir still hard)
* to import something, you gotta dep on its target
****

== Target Address Spec

More than one way to say **path/to/build/dir:target_name**

----
path/to/foo:foo
//path/to/foo:foo  (<- that's not a comment)
path/to/foo  (target with same name as dir)
:foo  (used in another target in same BUILD file)
----

*Command Line-only* conveniences:

----
./pants test path/to/foo/:foo
./pants test path/to/foo/
./pants test path/to/foo: (wildcard)
./pants test path/to/foo:: (recursive wildcard)
----

****
* Easier to refer to a target whose name is same as dir
* These paths are relative to "build root"
****

== Examples in a `BUILD`

Directory listing:

----
examples/src/java/com/pants/examples/hello/main/BUILD, ...,
                                                HelloMain.java
----

`BUILD` contents:

[source,python]
----
jvm_app(name='main', dependencies=[':main-bin'], ...)

jvm_binary(name='main-bin', source='HelloMain.java', ...,
  dependencies=['examples/src/java/com/pants/examples/hello/greet'])
----

****
* Some `name=` and `dependencies=` to illustrate what we just learned
* `name='main'` in the `main` dir = default target
* `':main-bin'` refers to target w/`name='main-bin'` in same dir
* `examples/src/java/com/pants/examples/hello/greet`: target in another dir
****

== Common JVM Targets

When developing on the JVM, the following target types are most frequently used:

* +java_library+ - An importable collection of Java code.
* +scala_library+ - An importable  collection of Scala code.
* +junit_tests+ - Tests a +java_library+/+scala_library+ with JUnit.
* +jar_library+ - Jar(s) from a maven repo
* +jvm_binary+ - A JVM binary optionally identifying a  main class.
* +jvm_app+ - A jvm app package consisting of a binary plus additional bundles of files.

****
* jvm_app/jvm_binary is legacy wart. Really, should have one target type w/optional bundles
****

== IntelliJ

* First-class pants support within IntelliJ (similar to maven, gradle, etc.)
* Get the plugin: https://github.com/pantsbuild/intellij-pants-plugin
* Create projects based on BUILD files

****
* Most developers use pants from the command line, but for those who like a GUI...
****

== Pants Patterns

* 3rdparty Dependencies
* 1:1:1 Rule
* Thrift
* Bundles

****
* Talk about common pants patterns users will find themselves doing regularly.
* Patterns (or "recipes") are the best way we know to use a number of primitives
together to best achieve a specific outcome.
****

== 3rdparty!

You probably use code from outside the repo. But if you're not careful, external dependencies can cause problems...

== Diamond Dependencies

What should happen here?

["graphviz"]
----
digraph G {
  java_library_a [label="foo"];
  java_library_b [label="bar"];
  java_library_c [label="baz"];
  java_library_a -> java_library_b -> guava_12;
  java_library_a -> java_library_c -> guava_16;
}
----

****
* Ask what version of Guava should be on the foo classpath?
* Note most likely the highest version number will end up on the classpath, which could lead to runtime errors due to missing classes, methods, etc.
* Pants does *not* solve this. It does simplify dependency management.
* Instead, use this convention: Define each external jar once. Use this internal dependency in projects that need it.
****

== Fix A Diamond Dependency

Point at same target, everyone gets same version

["graphviz"]
----
digraph G {
  java_library_a [label="foo"];
  java_library_b [label="bar"];
  java_library_c [label="baz"];
  guava [label="3rdparty/.../guava"];
  java_library_a -> java_library_b -> guava;
  java_library_a -> java_library_c -> guava;
}
----

****
* I know where to find my guava version now.
* Ha ha, but look out for transitives!
****

== 3rdparty Dependencies

Generalize this as "the 3rdparty pattern". By convention, create targets for all external dependencies, in a shared directory:

----
# 3rdparty/jvm/com/google:guava
jar_library(name='guava',
  jars=[
    jar(org='com.google', name='guava', rev='16.0.1')
  ]
)
----

****
* The solution to the diamond dependency problem! (well, not totally)
* Recommended target addresses 3rdparty/$LANG/$ORG:$NAME
* All internal sources use same external library version. Catch many diamond dependency issues.
* Aids discoverability, `git log` "detective work"
* Per-language conventions within language subdir. Use JVM for Java/Scala.
****

== 1:1:1 Rule

* 1 Directory
* 1 Package
* 1 BUILD Target

****
* Not a law, this "rule" is a rule of thumb
* fine-grained BUILD targets
* This is a way to avoid using rglobs(), which is an easy way to bundle lots of code into a target...
* ... that maybe isn't needed by all dependees of said target.
* also transitively pull in less dependencies
****

== Pants and Thrift

////
This slide's contents are an include so Twitter-folk can swap in different content.
Inside Twitter, there's a helper function to avoid boilerplate (mult langs, Finagle, etc).
////

include::pants_essentials_thrift.asc[]

== Deploying a Bundle

Want to upload something runnable to a server? Generate a bundle:

[source,python]
----
jvm_binary(name='foo-bin', dependencies=['src/java/com/mycom/foo'],
           main='com.mycom.foo.FooMain', ... )

jvm_app(name='foo-app', binary=':foo-bin',
  bundles=[bundle(relative_to='common').add(rglobs('common/*')),] ... )
----

----
./pants bundle foo:foo-app --bundle-archive=zip
----

Pants will produce +dist/foo-app.zip+ for you.

****
* `relative_to` means that `common/foo.ini` gets bundled at `./foo.ini`
* The raw bundle and zip are created in the +dist+ dir.
****

== Getting Help

* Goals online help: +
  +./pants goals+ +
  +./pants test -h+ +
  +./pants -e test+ (shows all goals run before test)
* Target types (and other `BUILD` things) +
  +./pants targets+ +
  +./pants targets --targets-details=java_library+
* What buildable things are here? +
  +./pants list tests/::+
* Also on the web: +
  http://pantsbuild.github.io/build_dictionary.html, +
  http://pantsbuild.github.io/options_reference.html
* Right now: +
  *Questions?*

****
* The point of explain is that it gives a list of goals, any can get a '+-h+'
****
