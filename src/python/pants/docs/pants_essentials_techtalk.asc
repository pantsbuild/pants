= The Pants Build System

////
Use https://github.com/twitter/cdk to generate this deck.
////

== Overview

Today we're learning the _essentials_. Practical knowledge that will help you _get stuff done_.

****
* Assumption is students already knows how to write code and have used build systems - just not pants.
* Quick review of what build systems do, and what they don't do.
* High-level overview of how pants works.
* Learn how to use and configure pants.
* Demo of using pants.
****


== 10,000-Foot View of Pants

[options="incremental"]
* Build system that _scales_.
* Put all code in a single repo; pick & choose exactly what you need.
* Simplifies dependency management by _eliminating versions for internal sources_.
* BUILD files define +Targets+ - "nouns" describing things that can be built.
* Pants provides +Tasks+ - "verbs" defining things the system can do.
* Use the CLI to say what tasks should be applied to what targets.


== Targets Graph - "nouns" of the build

["graphviz"]
----
include::targets_graph.dot['Example Targets Graph']
----

****
* Resolvers typically deal with the dependency graph for you.
* Pants gives you that control for internal sources.
* Targets describe things that can be built.
* They're typed.
* They typically have dependencies.
* Each supported language has targets mapped to conventions of that community.
****

== Tasks Graph - "verbs" of the build

["graphviz"]
----
include::tasks_graph.dot['Example Tasks Graph']
----

****
* Tasks are grouped into goals.
* Tasks and goals have dependencies.
* Tasks are topologically sorted.
* "On the way in" tasks register stuff they're interested in.
* "On the way out" tasks produce stuff other tasks are interested in.
* Only does the work actually needed.
****

== Let's Walk Through a Build

["graphviz"]
----
include::tasks_graph_tsort.dot['Sorted Tasks Graphs']
----

["graphviz"]
----
include::targets_graph.dot['Targets Graph']
----

== [notransition]#Let's Walk Through a Build#

["graphviz"]
----
include::tasks_graph_tsort.dot['Sorted Tasks Graphs']
----

["graphviz"]
----
include::targets_graph_gen.dot['Targets Graph']
----

****
* Note how the `scrooge` task will walk the targets graph looking for `thrift_library` targets.
* Uses scrooge to generate sources from the thrift IDL.
* Mutates the graph adding a new library that owns generated sources.
* Rewrites dependencies to the synthetic library.
****

== Anatomy of a Pants Command-Line

Pants is exclusively controlled via its command-line interface. Learn to use it well.

----
./pants goal goalname [goalname ...] target [target ...] [args ...]
----

----
./pants goal goals
----

----
./pants goal help mygoal
----

****
* Command lines specify one or more goals, one or more targets, and options.
****

== Target Addresses

Addresses are the BUILD file + target name. You can specify them several ways.

----
path/to/mybird/BUILD:mybird
path/to/mybird:mybird
path/to/mybird/:mybird
path/to/mybird/
path/to/mybird
:mybird  (relative to the current build file)
----

----
path/to/mybird:
path/to/mybird::
----

****
* Top addresses are explicit.
* Bottom addresses are expansive.
****

== Targets

Here's a simple library target. You might find this in +src/java/com/twitter/mybird/BUILD+.

[source,python]
----
java_library(
  name='mybird',
  dependencies=[
    pants('3rdparty/jvm/com/google/guava'),
  ],
  sources=globs('*.java'),
)
----

What _exactly_ can a +java_library+ look like? Check the BUILD Dictionary.

== Common JVM Targets

When developing on the JVM, the following target types are most frequently used:

* +java_library+ - A collection of Java code.
* +scala_library+ - A collection of Scala code.
* +junit_tests+ - Tests a JVM library with JUnit.
* +scala_specs+ - Tests a Scala library.
* +jar+ - A jar dependency.
* +resources+ - A set of resource files to be embedded in a library or binary.
* +jvm_binary+ - A JVM binary optionally identifying a launcher main class.
* +jvm_app+ - A jvm app package consisting of a binary plus additional bundles of files.


== Tasks You'll Use Every Day

[options="incremental"]
* +./pants goal compile+
* +./pants goal test+
* +./pants goal bundle+
* +./pants goal publish+
* +./pants goal idea+

== Pants Patterns

* 3rdparty Dependencies
* Thrift
* Bundles

****
* Talk about common pants patterns users will find themselves doing regularly.
* Patterns (or "recipes") are the best way we know to use a number of primitives
together to best achieve a specific outcome.
****

== External Dependencies

You probably use code from outside the repo.

----
# 3rdparty/jvm/com/twitter/mybird:mybird
dependencies(name='mybird',
  dependencies=[
    jar(org='com.twitter.mybird', name='mybird', rev='1.0.0')
  ]
)
----

****
* Recommended target addresses 3rdparty/$LANG/$ORG:$NAME
* All internal sources use same external library version. Eliminate diamond dependency issues.
* Aids discoverability.
* Allows specifying OWNERS files.
* Per-language conventions within language subdir. Use JVM for Java/Scala.
****


== External (Diamond) Dependencies

What should happen here? Avoid this by all internal sources using the same 3rdparty library version.

["graphviz"]
----
digraph G {
  java_library_a [label="foobird"];
  java_library_b [label="barbird"];
  java_library_c [label="bazbird"];
  java_library_a -> java_library_b -> guava_12;
  java_library_a -> java_library_c -> guava_14;
}
----

****
* Ask what version of Guava should be on the foobird classpath?
* Note most likely the highest version number will end up on the classpath, which could lead to runtime errors due to missing classes, methods, etc.
* Note pants will not solve this for folks, but it does help simplify dependency management.
* Each `jar` should be defined once for the whole repo, and everyone uses it.
****


== Pants and Thrift

IDL files live in your repo:

----
java_thrift_library(name='mybird-scala',
  sources=globs('*.thrift'),
  language='scala',
  rpc_style='finagle',
)
----

IDL files from another repo:

----
idl_jar_thrift_library(name='mybird-scala',
  thrift_jar=thrift_jar('com.twitter', 'mybird-thrift-scala-only', '1.0'),
  language='scala',
  rpc_style='finagle',
)
----


== Pants and Thrift

Need to codegen your IDL into a bunch of languages?
There's a helper for that.

----
create_thrift_libraries(
  base_name='mybird',
  sources=['mybird.thrift'],
  provides_java_name='mybird-thrift-java',
  provides_scala_name='mybird-thrift-scala',
)
----


== Deploy Bundles, jar-only case

Pants bundles have been suitable for launching on Aurora since day one.

----
# in mybird/BUILD
jvm_binary(name='mybird-bin',
  main='com.twitter.mybird.Main',
  dependencies=[pants('src/java/com/twitter/mybird')],
)
----

----
./pants goal bundle mybird:mybird-bin --bundle-archive=zip
----

The raw bundle and zip are created in the +dist+ dir.


== Deploy Bundles, jar and "extra stuff" case

Arbitrary files can be included in the bundle.

----
# in mybird/BUILD
jvm_app(name='mybird-app',
  binary=pants(':mybird-bin'),
  bundles=[bundle(relative_to='common').add(rglobs('common/*')),
])
----

----
./pants goal bundle mybird:mybird-app --bundle-archive=zip
----

The raw bundle and zip are created in the +dist+ dir.

== Getting Help

* Tasks online help: +./pants goal goals+
* Targets online help: +./pants goal targets+
* Dash H is your friend: +./pants goal ... -h+
* See the BUILD Dictionary.

****
Call special attention to the BUILD Dictionary, showing users how to find it and looking at it for a couple minutes.
****
