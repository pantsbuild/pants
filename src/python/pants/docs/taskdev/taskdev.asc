= Pants Task Development

:docsdir: ..

////
Use https://github.com/twitter/cdk to generate this deck.

TODO:
* Section on testing.
* Section on release process.
* Example where the targets graph is mutated.
* Example using the product map.
* Example with a new target type.
////


== Agenda

Today we're going to learn:

* Refresher of tasks and targets.
* The Task API.
* All about Task configuration
* Development Workflow
* Write a PageRank report task

New to pants? Consider taking the _essentials_ class first.


== Targets Graph

["graphviz"]
----
include::{docsdir}/targets_graph.dot['']
----


== Tasks Graph

["graphviz"]
----
include::{docsdir}/tasks_graph.dot['']
----


== Tasks & Targets Graphs

["graphviz"]
----
include::{docsdir}/tasks_graph_tsort.dot['']
----

["graphviz"]
----
include::{docsdir}/targets_graph.dot['']
----

////
* Mention each task is executed once and operates over all targets.
  Other build systems (like Maven) execute the full lifecycle over each
  target separately.
////

== Typical Task Categories

Tasks typically fall into one of the following categories:

* Transformer
* Verifier
* Reporter

////
Transformer
* give sources to a compiler which produces output files
* javac takes java source files and produces class files

Verifier
* check assumptions about the targets graph are indeed true
* java source files pass checkstyle

Reporter
* display information about targets
* forward and backward dependency reports
////


== Task API

Tasks are classes that extend the +Task+ base class.

----
Task.setup_parser(option_group, args, mkflag)
Task(context)
task.execute(targets)
----


== Task.setup_parser

+setup_parser+ is the first method called on your task.
Define command-line flags here.

----
@classmethod
def setup_parser(cls, option_group, args, mkflag):
  option_group.add_option(
    mkflag("skip"), mkflag("skip", negate=True),
    dest="scalastyle_skip",
    default=False,
    action="callback",
    callback=mkflag.set_bool,
    help="[%default] Skip scalastyle.")
----


== Task.\_\_init__

Constructor is called "on the way in." What typically happens?

* Task configures itself.
* Registers interest in products it needs other tasks to produce.

What's in +context+?

* +self.context.config+ - access the configuration file
* +self.context.options+ - access command-line flags
* +self.context.log+ - access the logger
* +self.context.products+ - access the product mapping

////
* Be as defensive as possible during configuration.
* Raise ConfigError as early as possible, with a great error message.
* No/few configuration file options should be required; provide sensible defaults.
* Write great docstrings, which are surfaced in the Goals Reference.
////

== task.execute

Execute is called "on the way out." Its where your task instance does its thing.

* Given the list of _active concrete targets_.
* Check if anyone wants what the task produces. If not, exit early.
* Walk the targets graph looking for nodes it finds interesting.
* Do whatever needs to happen to the target.


== Task Configuration

Pants is configured in two ways:

* command-line flags - for per-invocation options
* repo configuration file - configure optional behavior for the whole repo

Read +mykey+ from the +mytask+ configuration file section.

----

self.context.config.get('mytask', 'mykey')
----

Access a command-line flag the task defined.

----
self.context.options.myflag
----

////
* Command-line flags
* Repo Configuration file
* User Configuration file
* Does something really need to be configurable?
* Give it a sensible default.
* Read & validate configuration as early as possible and give good error messages.
////


== Task Installation

* Built-in tasks installed in +register.py+.

----
from twitter.pants.tasks.pagerank import PageRank
task(name='pagerank', action=PageRank)
  .install()
  .with_description('PageRank the given targets.')
----

////
* TODO: Discuss goals.
* TODO: Discuss options when installing tasks (ordering, goal dependencies).
* TODO: Discuss groups.
////


== Development Workflow

* Running from source
* Developing with IntelliJ


== Running from Source

In the science repo:

+PANTS_DEV=1 ./pants+

image::falcon.gif[falcon!]


== Pants + IntelliJ

* Create project.
* Running within the editor.
* Setting +cwd+ to work with different repos (e.g.: science, birdcage)
* https://confluence.twitter.biz/display/DEVPROD/Pants+Dev+Setup


== Writing a task

Now let's write a task.

See the "Task Developerâ€™s Guide" if you get stuck.


== PageRank Task

Simplified algorithm:

----
PR(A) = (1-d) + d (PR(T1)/C(T1) + ... + PR(Tn)/C(Tn))
----

* +d+ - dampening factor
* +T+ - targets
* +C+ - count of dependencies

////
* Each target starts with a default PR.
* Iterate some number of times, or until reaching a stopping condition.
////


== PageRank Output

Your task output should look something like:

----
$ ./pants pagerank src/java/com/twitter/common/:: | head
8.283371 - com.google.code.findbugs-jsr305-1.3.9
7.433371 - javax.inject-javax.inject-1
7.433371 - com.google.guava-guava-14.0.1
3.107220 - commons-lang-commons-lang-2.5
2.537617 - com.google.inject-guice-3.0
----


////
Stuff I wrote but am not sure to discard or include.
Keeping here for now.


== Installation

Pants is installed differently than most build systems.

Most build systems are installed on a _machine_.

Pants is installed in a _source repo_.

****
* pants and pants.ini are checked into a source repo.
* pants is a shell script that fetches a versioned pants.pex and launches.
* Reason is an artifact is derived from sources and specific tools.
* Version of build system to use is checked into the repo.
* Builds are reproducible because building at a particular sha will always use the same pants version.
****
////