#!/bin/bash
# Copyright 2014 Pants project contributors (see CONTRIBUTORS.md).
# Licensed under the Apache License, Version 2.0 (see LICENSE).
#
# Pants Autocompletion Support
#
# To use, copy this scropt to a file and use the "source" command to include
# it in your .bashrc. The autocompletion will not work if you run the file,
# it must be "sourced" directly from .bashrc.

__pants_scopes='{{{scopes_text}}}'
{{{options_text}}}
__pants_global_options='{{{global_options}}}'

# Pants autocompletion handler.
__pants_autocomplete() {
  # The reply to the shell must be placed in the COMPREPLY variable.
  COMPREPLY=()

  local pants="${COMP_WORDS[0]}"

  # Determine what the user is trying to autocomplete (goal, option, or target).

  local saw_goal=0
  local goal_name=''
  local is_option=0
  local is_goal=0

  local i=1   # Skip index 0 which is the "./pants" command.
  while [[ $i -le $COMP_CWORD ]]; do
    local arg="${COMP_WORDS[i]}"
    case "$arg" in
      -*)
        is_option=1
        is_goal=0
        ;;
      *)
        is_option=0
        if [[ $saw_goal = 1 ]]; then
          is_goal=0
        else
          is_goal=1
          saw_goal=1
          goal_name="$arg"
        fi
    esac

    i="$(expr "$i" + 1)"
  done

  # Return a response to bash based on the context.
  if [[ $is_goal = 1 ]]; then
    # Autocomplete using the goal names.
    COMPREPLY=($(compgen -W "$__pants_scopes" "${COMP_WORDS[COMP_CWORD]}" ))
  elif [[ $is_option = 1 ]]; then
    # Autocomplete using any relevant options for `goal_name` plus the global options.
    local options=''
    local goal_name_for_var=`echo "${goal_name}" | tr .- __  `
    eval "options=\"\${__pants_options_for_${goal_name_for_var}}\""
    COMPREPLY=($(compgen -W "${options} ${__pants_global_options}" -- "${COMP_WORDS[COMP_CWORD]}" ))
  else
    local arg="${COMP_WORDS[COMP_CWORD]}"
    if [[ "$arg" =~ ":" ]]; then
      local parts=(${arg//:/ })
      local path=${parts[0]}

      # If the path before the colon points at a valid BUILD file, query Pants for the targets.
      if [ -r "${path}/BUILD" ]; then
        local completions=`"$pants" list "${path}:" 2>/dev/null | cut -d: -f2`
        COMPREPLY=($(compgen -W "${completions}" -- "${parts[1]}" ))
      fi
    fi
  fi
}

# Install the pants autocompletion handler. The "default" completion option tells Bash to perform its regular
# filename substitution if the function fails to provide candidates.
complete -o default -F __pants_autocomplete pants
