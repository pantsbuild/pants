# Copyright 2020 Pants project contributors (see CONTRIBUTORS.md).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

from __future__ import annotations

import pytest

from pants.backend.experimental.audit.audit import AuditResult, AuditResults
from pants.backend.experimental.audit.pip_audit_rule import PypiAuditRequest
from pants.backend.experimental.audit.pip_audit_rule import rules as pip_audit_rules
from pants.backend.python.subsystems.setup import PythonSetup
from pants.backend.python.target_types import PythonRequirementTarget
from pants.backend.python.util_rules.pex_requirements import rules as pex_requirements_rules
from pants.engine.rules import QueryRule
from pants.testutil.rule_runner import RuleRunner


@pytest.fixture
def rule_runner() -> RuleRunner:
    return RuleRunner(
        rules=[
            *PythonSetup.rules(),
            *pip_audit_rules(),
            *pex_requirements_rules(),
            # *config_files.rules(),
            # *target_types_rules.rules(),
            QueryRule(AuditResults, (PypiAuditRequest,)),
        ],
        target_types=[PythonRequirementTarget],
    )


setuptools_poetry_lockfile = r"""
# This lockfile was autogenerated by Pants. To regenerate, run:
#
#    ./pants generate-lockfiles --resolve=setuptools
#
# --- BEGIN PANTS LOCKFILE METADATA: DO NOT EDIT OR REMOVE ---
# {
#   "version": 2,
#   "valid_for_interpreter_constraints": [
#     "CPython>=3.7"
#   ],
#   "generated_with_requirements": [
#     "setuptools==54.1.2"
#   ]
# }
# --- END PANTS LOCKFILE METADATA ---

setuptools==54.1.2; python_version >= "3.6" \
    --hash=sha256:dd20743f36b93cbb8724f4d2ccd970dce8b6e6e823a13aa7e5751bb4e674c20b \
    --hash=sha256:ebd0148faf627b569c8d2a1b20f5d3b09c873f12739d71c7ee88f037d5be82ff
"""


def test_pip_audit(rule_runner: RuleRunner) -> None:
    rule_runner.write_files(
        {
            "a.lock": setuptools_poetry_lockfile,
            "b.lock": setuptools_poetry_lockfile,
        }
    )
    rule_runner.set_options(
        [
            "--python-resolves={'a': 'a.lock', 'b': 'b.lock'}",
            "--python-enable-resolves",
        ],
    )
    result = rule_runner.request(AuditResults, [PypiAuditRequest(field_sets=())])
    assert result == AuditResults(
        results=(
            AuditResult(lockfile="a.lock", report="a"),
            AuditResult(lockfile="b.lock", report="b"),
        ),
        auditor_name="pypi_auditor",
    )


# def test_multiple_resolves() -> None:
#     rule_runner = RuleRunner(
#         rules=[
#             setup_user_lockfile_requests,
#             SubsystemRule(PythonSetup),
#             QueryRule(UserGenerateLockfiles, [RequestedPythonUserResolveNames]),
#         ],
#         target_types=[PythonRequirementTarget],
#     )
#     rule_runner.write_files(
#         {
#             "BUILD": dedent(
#                 """\
#                 python_requirement(
#                     name='a',
#                     requirements=['a'],
#                     resolve='a',
#                 )
#                 python_requirement(
#                     name='b',
#                     requirements=['b'],
#                     resolve='b',
#                 )
#                 """
#             ),
#         }
#     )
#     rule_runner.set_options(
#         [
#             "--python-resolves={'a': 'a.lock', 'b': 'b.lock'}",
#             # Override interpreter constraints for 'b', but use default for 'a'.
#             "--python-resolves-to-interpreter-constraints={'b': ['==3.7.*']}",
#             "--python-enable-resolves",
#         ],
#         env_inherit=PYTHON_BOOTSTRAP_ENV,
#     )
#     result = rule_runner.request(
#         UserGenerateLockfiles, [RequestedPythonUserResolveNames(["a", "b"])]
#     )
#     assert set(result) == {
#         GeneratePythonLockfile(
#             requirements=FrozenOrderedSet(["a"]),
#             interpreter_constraints=InterpreterConstraints(
#                 PythonSetup.default_interpreter_constraints
#             ),
#             resolve_name="a",
#             lockfile_dest="a.lock",
#         ),
#         GeneratePythonLockfile(
#             requirements=FrozenOrderedSet(["b"]),
#             interpreter_constraints=InterpreterConstraints(["==3.7.*"]),
#             resolve_name="b",
#             lockfile_dest="b.lock",
#         ),
#     }
