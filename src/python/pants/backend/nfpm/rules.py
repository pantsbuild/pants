# Copyright 2023 Pants project contributors (see CONTRIBUTORS.md).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

from __future__ import annotations

from dataclasses import dataclass

from pants.backend.nfpm.field_sets import NfpmPackageFieldSet
from pants.backend.nfpm.field_sets import rules as field_sets_rules
from pants.backend.nfpm.subsystem import NfpmSubsystem
from pants.backend.nfpm.util_rules.generate_config import (
    NfpmPackageConfig,
    NfpmPackageConfigRequest,
)
from pants.backend.nfpm.util_rules.generate_config import rules as generate_config_rules
from pants.backend.nfpm.util_rules.sandbox import NfpmContentSandbox, NfpmContentSandboxRequest
from pants.backend.nfpm.util_rules.sandbox import rules as sandbox_rules
from pants.core.goals import package
from pants.core.goals.package import BuiltPackage, BuiltPackageArtifact
from pants.core.util_rules.external_tool import DownloadedExternalTool, ExternalToolRequest
from pants.engine.fs import CreateDigest, Directory, MergeDigests
from pants.engine.internals.native_engine import AddPrefix, Digest, RemovePrefix, Snapshot
from pants.engine.internals.selectors import Get, MultiGet
from pants.engine.platform import Platform
from pants.engine.process import Process, ProcessResult
from pants.engine.rules import collect_rules, rule
from pants.util.logging import LogLevel


@dataclass(frozen=True)
class BuiltNfpmPackageArtifact(BuiltPackageArtifact):
    packager: str = ""

    @classmethod
    def create(cls, relpath: str, packager: str) -> BuiltNfpmPackageArtifact:
        return cls(
            relpath=relpath,
            packager=packager,
            extra_log_lines=(f"Built {packager} package with nFPM: {relpath}",),
        )


@rule(level=LogLevel.INFO)
async def package_nfpm_package(
    field_set: NfpmPackageFieldSet,
    nfpm_subsystem: NfpmSubsystem,
    platform: Platform,
) -> BuiltPackage:
    output_dir = "__out"

    nfpm_content_sandbox = await Get(NfpmContentSandbox, NfpmContentSandboxRequest(field_set))

    nfpm_config, downloaded_tool, output_dir_digest = await MultiGet(
        Get(NfpmPackageConfig, NfpmPackageConfigRequest(field_set, nfpm_content_sandbox.digest)),
        Get(DownloadedExternalTool, ExternalToolRequest, nfpm_subsystem.get_request(platform)),
        Get(Digest, CreateDigest([Directory(output_dir)])),
    )

    sandbox_digest = await Get(
        Digest,
        MergeDigests(
            (
                nfpm_content_sandbox.digest,
                nfpm_config.digest,
                downloaded_tool.digest,
                output_dir_digest,
            )
        ),
    )

    result = await Get(
        ProcessResult,
        Process(
            argv=(
                downloaded_tool.exe,
                "package",  # or "pkg" or "p"
                # use default config file: nfpm.yaml
                "--packager",  # or "-p"
                field_set.packager,
                "--target",  # or "-t"
                output_dir,
            ),
            description=f"Creating {field_set.packager} package with nFPM: {field_set.address}",
            input_digest=sandbox_digest,
            output_directories=(output_dir,),
        ),
    )

    # The final directory that should contain the package artifact.
    # The package artifact itself will use the conventional filename generated by nFPM.
    output_path = field_set.output_path.value_or_default(file_ending=None)

    stripped_digest = await Get(Digest, RemovePrefix(result.output_digest, output_dir))
    final_snapshot = await Get(Snapshot, AddPrefix(stripped_digest, output_path))

    # nFPM creates only 1 file (any signature gets embedded in the package file).
    assert len(final_snapshot.files) == 1
    conventional_file_name = final_snapshot.files[0]

    return BuiltPackage(
        final_snapshot.digest,
        artifacts=(BuiltNfpmPackageArtifact.create(conventional_file_name, field_set.packager),),
    )


def rules():
    return [
        *package.rules(),
        *field_sets_rules(),
        *generate_config_rules(),
        *sandbox_rules(),
        *collect_rules(),
    ]
