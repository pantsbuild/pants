# Copyright 2021 Pants project contributors (see CONTRIBUTORS.md).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

from __future__ import annotations

from textwrap import dedent

from pants.backend.python.goals.lockfile import (
    GeneratePythonLockfile,
    RequestedPythonUserResolveNames,
)
from pants.backend.python.goals.lockfile import rules as lockfile_rules
from pants.backend.python.goals.lockfile import setup_user_lockfile_requests
from pants.backend.python.subsystems.setup import PythonSetup
from pants.backend.python.target_types import PythonRequirementTarget
from pants.backend.python.util_rules import pex
from pants.backend.python.util_rules.interpreter_constraints import InterpreterConstraints
from pants.core.goals.generate_lockfiles import GenerateLockfileResult, UserGenerateLockfiles
from pants.engine.fs import DigestContents
from pants.engine.rules import SubsystemRule
from pants.testutil.rule_runner import PYTHON_BOOTSTRAP_ENV, QueryRule, RuleRunner
from pants.util.ordered_set import FrozenOrderedSet


def test_lockfile_generation() -> None:
    rule_runner = RuleRunner(
        rules=[
            *lockfile_rules(),
            *pex.rules(),
            QueryRule(GenerateLockfileResult, [GeneratePythonLockfile]),
        ]
    )
    rule_runner.set_options(
        ["--python-experimental-generate-lockfiles-with-pex"], env_inherit=PYTHON_BOOTSTRAP_ENV
    )
    result = rule_runner.request(
        GenerateLockfileResult,
        [
            GeneratePythonLockfile(
                requirements=FrozenOrderedSet(["ansicolors==1.1.8"]),
                interpreter_constraints=InterpreterConstraints(),
                resolve_name="test",
                lockfile_dest="test.lock",
            )
        ],
    )
    lockfile_contents = rule_runner.request(DigestContents, [result.digest])
    assert len(lockfile_contents) == 1
    assert lockfile_contents[0].content.decode() == dedent(
        """\
        # This lockfile was autogenerated by Pants. To regenerate, run:
        #
        #    ./pants generate-lockfiles --resolve=test
        #
        # --- BEGIN PANTS LOCKFILE METADATA: DO NOT EDIT OR REMOVE ---
        # {
        #   "version": 2,
        #   "valid_for_interpreter_constraints": [],
        #   "generated_with_requirements": [
        #     "ansicolors==1.1.8"
        #   ]
        # }
        # --- END PANTS LOCKFILE METADATA ---

        ansicolors==1.1.8 \\
            --hash=sha256:00d2dde5a675579325902536738dd27e4fac1fd68f773fe36c21044eb559e187  \\
            --hash=sha256:99f94f5e3348a0bcd43c82e5fc4414013ccc19d70bd939ad71e0133ce9c372e0 
        """
    )


def test_multiple_resolves() -> None:
    rule_runner = RuleRunner(
        rules=[
            setup_user_lockfile_requests,
            SubsystemRule(PythonSetup),
            QueryRule(UserGenerateLockfiles, [RequestedPythonUserResolveNames]),
        ],
        target_types=[PythonRequirementTarget],
    )
    rule_runner.write_files(
        {
            "BUILD": dedent(
                """\
                python_requirement(
                    name='both',
                    requirements=['both1', 'both2'],
                    experimental_compatible_resolves=['a', 'b'],
                )
                python_requirement(
                    name='a',
                    requirements=['a'],
                    experimental_compatible_resolves=['a'],
                )
                python_requirement(
                    name='b',
                    requirements=['b'],
                    experimental_compatible_resolves=['b'],
                )
                """
            ),
        }
    )
    rule_runner.set_options(
        [
            "--python-experimental-resolves={'a': 'a.lock', 'b': 'b.lock'}",
            # Override interpreter constraints for 'b', but use default for 'a'.
            "--python-experimental-resolves-to-interpreter-constraints={'b': ['==3.7.*']}",
            "--python-enable-resolves",
        ],
        env_inherit=PYTHON_BOOTSTRAP_ENV,
    )
    result = rule_runner.request(
        UserGenerateLockfiles, [RequestedPythonUserResolveNames(["a", "b"])]
    )
    assert set(result) == {
        GeneratePythonLockfile(
            requirements=FrozenOrderedSet(["a", "both1", "both2"]),
            interpreter_constraints=InterpreterConstraints(
                PythonSetup.default_interpreter_constraints
            ),
            resolve_name="a",
            lockfile_dest="a.lock",
        ),
        GeneratePythonLockfile(
            requirements=FrozenOrderedSet(["b", "both1", "both2"]),
            interpreter_constraints=InterpreterConstraints(["==3.7.*"]),
            resolve_name="b",
            lockfile_dest="b.lock",
        ),
    }
