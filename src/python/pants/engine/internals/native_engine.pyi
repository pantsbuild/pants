from typing import Any, Dict, List, TextIO, Tuple

# TODO: black and flake8 disagree about the content of this file:
#   see https://github.com/psf/black/issues/1548
# flake8: noqa: E302

def write_log(msg: str, level: int, target: str) -> None: ...
def flush_log() -> None: ...
def stdio_initialize(
    level: int,
    show_rust_3rdparty_logs: bool,
    use_color: bool,
    show_target: bool,
    log_levels_by_target: Dict[str, int],
    message_regex_filters: Tuple[str, ...],
    log_file: str,
) -> Tuple[TextIO, TextIO, TextIO]: ...
def stdio_thread_get_destination() -> PyStdioDestination: ...
def stdio_thread_set_destination(destination: PyStdioDestination) -> None: ...
def stdio_thread_console_set(stdin_fileno: int, stdout_fileno: int, stderr_fileno: int) -> None: ...
def stdio_thread_console_clear() -> None: ...
def stdio_write_stdout(msg: str) -> None: ...
def stdio_write_stderr(msg: str) -> None: ...
def teardown_dynamic_ui(scheduler: PyScheduler, session: PySession) -> None: ...

class PyDigest:
    def __init__(self, fingerprint: str, serialized_bytes_length: int) -> None: ...
    @property
    def fingerprint(self) -> str: ...
    @property
    def serialized_bytes_length(self) -> int: ...

class PySnapshot:
    def __init__(self) -> None: ...
    @property
    def digest(self) -> PyDigest: ...
    @property
    def dirs(self) -> Tuple[str, ...]: ...
    @property
    def files(self) -> Tuple[str, ...]: ...

class PyExecutionRequest:
    def __init__(self, **kwargs: Any) -> None: ...

class PyExecutionStrategyOptions:
    def __init__(self, **kwargs: Any) -> None: ...

class PyExecutor:
    def __init__(self, core_threads: int, max_threads: int) -> None: ...

class PyGeneratorResponseBreak:
    def __init__(self, **kwargs: Any) -> None: ...

class PyGeneratorResponseGet:
    def __init__(self, **kwargs: Any) -> None: ...

class PyGeneratorResponseGetMulti:
    def __init__(self, **kwargs: Any) -> None: ...

class PyNailgunServer:
    def __init__(self, **kwargs: Any) -> None: ...

class PyNailgunClient:
    def __init__(self, **kwargs: Any) -> None: ...
    def execute(self, command: str, args: List[str], env: Dict[str, str]) -> int: ...

class PyRemotingOptions:
    def __init__(self, **kwargs: Any) -> None: ...

class PyScheduler:
    def __init__(self, **kwargs: Any) -> None: ...

class PySession:
    def __init__(self, **kwargs: Any) -> None: ...

class PySessionCancellationLatch:
    def __init__(self) -> None: ...

class PyTasks:
    def __init__(self, **kwargs: Any) -> None: ...

class PyTypes:
    def __init__(self, **kwargs: Any) -> None: ...

class PyStubCASBuilder:
    def always_errors(self): ...
    def build(self, executor: PyExecutor) -> PyStubCAS: ...

class PyStubCAS:
    @classmethod
    def builder(cls) -> PyStubCASBuilder: ...
    def address(self) -> str: ...

class PyStdioDestination:
    pass
