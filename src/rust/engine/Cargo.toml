[package]
version = "0.0.1"
edition = "2021"
name = "engine"
authors = ["Pants Build <pantsbuild@gmail.com>"]
publish = false

# NOTE: See `src/rust/engine/.cargo/config` for `--cfg` flags enabled for these crates.
# tokio_unstable is necessary for access to the `id`-related functions of tokio::task::JoinSet.
# See https://docs.rs/tokio/1.21.1/tokio/task/struct.JoinSet.html#method.join_next_with_id.

[profile.dev]
# Increase the optimization level of the dev profile slightly, as otherwise `rule_graph`
# solving takes prohibitively long.
opt-level = 1

[profile.release]
# Enable only "line tables", which give line information in backtraces, but do not record information
# about local variables.
debug = 1
# Optimise for the speed of our binary, rather than the speed of compilation.
codegen-units = 1

[lib]
crate-type = ["cdylib"]

[features]
# NB: To actually load this crate from python, the `extension-module` feature must be enabled. But
# unfortunately, enabling `extension-module` causes tests linked against `pyo3` to fail. We
# define a feature to enable that, but we do not enable it by default: someone building this module
# in order to extract `libengine.so` should pass `cargo build .. --features=extension-module`.
#  see https://github.com/PyO3/pyo3/issues/340
extension-module = ["pyo3/extension-module"]
default = []

[dependencies]
address = { path = "address" }
async_latch = { path = "async_latch" }
async-trait = { workspace = true }
protos = { path = "protos" }
bytes = { workspace = true }
cache = { path = "cache" }
concrete_time = { path = "concrete_time" }
crossbeam-channel = { workspace = true }
deepsize = { workspace = true, features = ["internment", "smallvec"] }
dep_inference = { path = "dep_inference" }
derivative = { workspace = true }
async-oncecell = { workspace = true }
docker = { path = "process_execution/docker" }
fnv = { workspace = true }
fs = { path = "fs" }
futures = { workspace = true }
futures-core = { workspace = true }
graph = { path = "graph" }
grpc_util = { path = "grpc_util" }
hashing = { path = "hashing" }
humansize = { workspace = true }
indexmap = { workspace = true }
internment = { workspace = true }
itertools = { workspace = true }
lazy_static = { workspace = true }
libc = { workspace = true }
log = { workspace = true }
logging = { path = "logging" }
nailgun = { path = "nailgun" }
num_enum = { workspace = true }
options = { path = "options" }
pantsd = { path = "pantsd" }
parking_lot = { workspace = true }
petgraph = { workspace = true }
process_execution = { path = "process_execution" }
pyo3 = { workspace = true }
rand = { workspace = true }
regex = { workspace = true }
reqwest = { version = "0.11", default_features = false, features = ["stream", "rustls-tls"] }
rule_graph = { path = "rule_graph" }
smallvec = { version = "1", features = ["union"] }
stdio = { path = "stdio" }
store = { path = "fs/store" }
serde = { workspace = true }
serde_json = { workspace = true }
task_executor = { path = "task_executor" }
tempfile = { workspace = true }
testutil_mock = { package = "mock", path = "testutil/mock" }
time = { workspace = true }
tokio = { workspace = true, features = ["macros", "rt", "rt-multi-thread"] }
tokio-retry = { workspace = true }
tokio-util = { workspace = true, features = ["io"] }
tryfuture = { path = "tryfuture" }
ui = { path = "ui" }
url = { workspace = true }
watch = { path = "watch" }
workunit_store = { path = "workunit_store" }
remote = { path = "process_execution/remote" }
pe_nailgun = { path = "process_execution/pe_nailgun" }

[dev-dependencies]
testutil = { path = "./testutil" }
fs = { path = "./fs" }
env_logger = { workspace = true }

[build-dependencies]
pyo3-build-config = "0.18"

[lints]
workspace = true

[workspace]
resolver = "2"
# These are the packages which are built/tested when the --all flag is passed to cargo.
#
# We need to explicitly list these, because otherwise the standalone tools
# (e.g. fs_util) won't be included when we build/test things.
members = [
  ".",
  "address",
  "async_latch",
  "async_value",
  "cache",
  "client",
  "concrete_time",
  "dep_inference",
  "fs",
  "fs/brfs",
  "fs/fs_util",
  "fs/store",
  "graph",
  "grpc_util",
  "hashing",
  "stdio",
  "logging",
  "nailgun",
  "options",
  "pantsd",
  "process_execution",
  "process_execution/docker",
  "process_execution/pe_nailgun",
  "process_execution/remote",
  "process_executor",
  "protos",
  "remote_provider",
  "remote_provider/remote_provider_opendal",
  "remote_provider/remote_provider_reapi",
  "remote_provider/remote_provider_traits",
  "rule_graph",
  "sharded_lmdb",
  "task_executor",
  "testutil",
  "testutil/mock",
  "testutil/local_cas",
  "testutil/local_execution_server",
  "tryfuture",
  "ui",
  "watch",
  "workunit_store",
]

# These are the packages which are built/tested when no special selector flags are passed to cargo.
#
# This is the set of packages which are expected to work on any arbitrary system that checks out the code.
# It should be exactly equivalent to members, except without any packages that require more system
# configuration than we're comfortable doing in our bootstrap scripts.
#
# In particular, it does not contain the fs/brfs package, which will not compile without a fuse installation.
# On Ubuntu, that means installing libfuse-dev. On OSX, that means installing OSXFUSE.
default-members = [
  ".",
  "address",
  "async_latch",
  "async_value",
  "cache",
  "client",
  "concrete_time",
  "dep_inference",
  "fs",
  "fs/fs_util",
  "fs/store",
  "graph",
  "grpc_util",
  "hashing",
  "stdio",
  "logging",
  "nailgun",
  "options",
  "pantsd",
  "process_execution",
  "process_execution/docker",
  "process_execution/pe_nailgun",
  "process_execution/remote",
  "process_executor",
  "protos",
  "remote_provider",
  "remote_provider/remote_provider_opendal",
  "remote_provider/remote_provider_reapi",
  "remote_provider/remote_provider_traits",
  "rule_graph",
  "sharded_lmdb",
  "task_executor",
  "testutil",
  "testutil/mock",
  "testutil/local_cas",
  "testutil/local_execution_server",
  "tryfuture",
  "ui",
  "watch",
  "workunit_store",
]

# We set external dependency versions at the workspace level, so they are synced
# across all crates.  A crate can use the version set here by setting `workspace = true`
# instead of setting an explicit version. See:
# https://doc.rust-lang.org/nightly/cargo/reference/specifying-dependencies.html#\
#  inheriting-a-dependency-from-a-workspace
[workspace.dependencies]
arc-swap = "1.6"
async-lock = "2.8"
async-oncecell = "0.2"
async-stream = "0.3"
async-trait = "0.1"
axum = "0.6"
axum-server = "0.5"
bincode = "1.3.3"
bollard = "0.14.0"
byteorder = "1.5"
bytes = "1.5"
chrono = "0.4.22"
clap = "3"
colored = "2.0.0"
console = "0.15.7"
criterion = "0.4"
crossbeam-channel = "0.5"
# TODO: Waiting on https://github.com/Aeledfyr/deepsize/pull/{30,31,32}.
deepsize = { git = "https://github.com/stuhood/deepsize.git", rev = "5c8bee5443fcafe4aaa9274490d354412d0955c1" }
derivative = "2.2"
digest = "0.10"
dirs-next = "2"
docker_credential = "1.2"
either = "1"
env_logger = "0.10.0"
errno = "0.2.8"
fixedbitset = "0.4"
fnv = "1.0.5"
fs-set-times = "0.19"
fuser = "0.11.1"
futures = "0.3"
futures-core = "^0.3.23"
generic-array = "0.14"
glob = "0.3.1"
hdrhistogram = "7.5"
hex = "0.4.3"
http = "0.2"
http-body = "0.4"
humansize = "1.1"
hyper = "0.14"
hyper-rustls = "0.24"
ignore = { git = "https://github.com/pantsbuild/ripgrep.git", rev = "0f7e0fdd00ae528745a7fea24a320cae98235341" }
indexmap = "1.9"
indicatif = "0.17"
internment = "0.6"
itertools = "0.10"
lazy_static = "1"
libc = "0.2.137"
lmdb-rkv = { git = "https://github.com/pantsbuild/lmdb-rs.git", rev = "6ae7a552aa2c932c3ddf652a68cdde2fed547cbc" }
log = "0.4.20"
madvise = "0.1"
maplit = "1.0.1"
nails = "0.13"
nix = "0.25"
notify = { git = "https://github.com/pantsbuild/notify", rev = "276af0f3c5f300bfd534941386ba2f3b3a022df7" }
num_cpus = "1"
num_enum = "0.5"
once_cell = "1.18"
opendal = { version = "0.41", default-features = false, features = [
  "services-memory",
  "services-fs",
  "services-ghac",
] }
os_pipe = "1.1"
parking_lot = "0.12"
peg = "0.8"
petgraph = "0.6"
pin-project = "1.0.12"
pin-project-lite = "0.2"
prodash = { git = "https://github.com/stuhood/prodash", rev = "stuhood/raw-messages-draft", version = "16", default-features = false, features = [
  "progress-tree",
  "render-line",
  "render-line-termion",
] }
prost = "0.12"
prost-build = "0.12"
prost-types = "0.12"
pyo3 = "0.20"
rand = "0.8"
regex = "1"
rlimit = "0.8"
rustls = "0.21.8"
rustls-native-certs = "0.6"
rustls-pemfile = "1.0"
serde = "1.0.160"
serde_derive = "1.0.98"
serde_json = "1.0"
serde_test = "1.0"
serde_yaml = "0.9"
sha2 = "0.10"
shell-quote = "0.3.0"
shellexpand = "2.1"
shlex = "1.2.0"
strum = "0.24"
strum_macros = "0.24"
sysinfo = "0.20.0"
tempfile = "3.5.0"
terminal_size = "0.1.15"
time = "0.3.30"
tokio = "1.32"
tokio-retry = "0.3"
tokio-rustls = "0.24"
tokio-stream = "0.1"
tokio-util = "0.7"
toml = "0.5"
tonic = "0.10"
tonic-build = "0.10"
tower = "0.4"
tower-layer = "0.3"
tower-service = "0.3"
uname = "0.1.1"
url = "2.4"
uuid = "1.6.1"
walkdir = "2"
webpki = "0.22"
whoami = "1.4.1"

# NB: If a change to these versions requires cache busting, bump the version of
# `src/rust/engine/dep_inference/Cargo.toml`.
tree-sitter = "0.20.10"
tree-sitter-javascript = "0.20.1"
tree-sitter-python = "0.20.4"

[patch.crates-io]
# https://github.com/console-rs/console/pull/186
console = { version = "0.15.7", git = "https://github.com/tgolsson/console.git", rev = "5483880905f384679d322e83c37180f122951995" }
# https://github.com/console-rs/indicatif/pull/608
indicatif = { version = "0.17.7", git = "https://github.com/tgolsson/indicatif.git", rev = "31890f0ac55f9727d152ad314a78757ccc0142b6" }


# Default lints adopted by most crates in this workspace.

[workspace.lints.rust]
warnings = { level = "deny", priority = 0 }

# Enable all clippy lints except for many of the pedantic ones.
[workspace.lints.clippy]
all = { level = "deny", priority = 0 }

default_trait_access = { level = "deny", priority = 1 }
expl_impl_clone_on_copy = { level = "deny", priority = 1 }
if_not_else = { level = "deny", priority = 1 }
needless_continue = { level = "deny", priority = 1 }
unseparated_literal_suffix = { level = "deny", priority = 1 }
used_underscore_binding = { level = "deny", priority = 1 }

# It is often more clear to show that nothing is being moved.
match_ref_pats = { level = "allow", priority = 1 }

# Subjective style.
len_without_is_empty = { level = "allow", priority = 1 }
redundant_field_names = { level = "allow", priority = 1 }
too_many_arguments = { level = "allow", priority = 1 }

# Default isn't as big a deal as people seem to think it is.
new_without_default = { level = "allow", priority = 1 }
new_ret_no_self = { level = "allow", priority = 1 }

# Arc<Mutex> can be more clear than needing to grok Orderings:
mutex_atomic = { level = "allow", priority = 1 }
