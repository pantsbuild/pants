[package]
version = "0.0.1"
edition = "2021"
name = "engine"
authors = ["Pants Build <pantsbuild@gmail.com>"]
publish = false

[lib]
crate-type = ["cdylib"]

[features]
# NB: To actually load this crate from python, the `extension-module` feature must be enabled. But
# unfortunately, enabling `extension-module` causes tests linked against `pyo3` to fail. We
# define a feature to enable that, but we do not enable it by default: someone building this module
# in order to extract `libengine.so` should pass `cargo build .. --features=extension-module`.
#  see https://github.com/PyO3/pyo3/issues/340
extension-module = ["pyo3/extension-module"]
default = []

[dependencies]
address = { path = "../address" }
async_latch = { path = "../async_latch" }
async-trait = { workspace = true }
protos = { path = "../protos" }
bytes = { workspace = true }
cache = { path = "../cache" }
concrete_time = { path = "../concrete_time" }
crossbeam-channel = { workspace = true }
deepsize = { workspace = true, features = ["internment", "smallvec"] }
dep_inference = { path = "../dep_inference" }
derivative = { workspace = true }
async-oncecell = { workspace = true }
children = { path = "../process_execution/children" }
docker = { path = "../process_execution/docker" }
fnv = { workspace = true }
fs = { path = "../fs" }
futures = { workspace = true }
futures-core = { workspace = true }
graph = { path = "../graph" }
grpc_util = { path = "../grpc_util" }
hashing = { path = "../hashing" }
humansize = { workspace = true }
indexmap = { workspace = true }
internment = { workspace = true }
itertools = { workspace = true }
libc = { workspace = true }
log = { workspace = true }
logging = { path = "../logging" }
nailgun = { path = "../nailgun" }
num_enum = { workspace = true }
options = { path = "../options" }
pantsd = { path = "../pantsd" }
parking_lot = { workspace = true }
petgraph = { workspace = true }
process_execution = { path = "../process_execution" }
pyo3 = { workspace = true }
rand = { workspace = true }
regex = { workspace = true }
reqwest = { version = "0.12", default-features = false, features = ["stream", "rustls-tls"] }
rule_graph = { path = "../rule_graph" }
sandboxer = { path = "../process_execution/sandboxer" }
smallvec = { version = "1", features = ["union"] }
stdio = { path = "../stdio" }
store = { path = "../fs/store" }
serde = { workspace = true }
serde_json = { workspace = true }
task_executor = { path = "../task_executor" }
tempfile = { workspace = true }
testutil_mock = { package = "mock", path = "../testutil/mock" }
time = { workspace = true }
tokio = { workspace = true, features = ["macros", "rt", "rt-multi-thread"] }
tokio-retry2 = { workspace = true }
tokio-util = { workspace = true, features = ["io"] }
tryfuture = { path = "../tryfuture" }
ui = { path = "../ui" }
url = { workspace = true }
watch = { path = "../watch" }
workunit_store = { path = "../workunit_store" }
remote = { path = "../process_execution/remote" }
pe_nailgun = { path = "../process_execution/pe_nailgun" }

[dev-dependencies]
axum = { workspace = true }
axum-server = { workspace = true }
maplit = { workspace = true }
testutil = { path = "../testutil" }
fs = { path = "../fs" }
env_logger = { workspace = true }

[build-dependencies]
pyo3-build-config = { workspace = true }

[lints]
workspace = true
