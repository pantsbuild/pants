[package]
version = "0.0.1"
edition = "2021"
name = "engine"
authors = ["Pants Build <pantsbuild@gmail.com>"]
publish = false

# NOTE: See `src/rust/engine/.cargo/config` for `--cfg` flags enabled for these crates.
# tokio_unstable is necessary for access to the `id`-related functions of tokio::task::JoinSet.
# See https://docs.rs/tokio/1.21.1/tokio/task/struct.JoinSet.html#method.join_next_with_id.

[profile.dev]
# Increase the optimization level of the dev profile slightly, as otherwise `rule_graph`
# solving takes prohibitively long.
opt-level = 1

[profile.release]
# Enable only "line tables", which give line information in backtraces, but do not record information
# about local variables.
debug = 1
# Optimise for the speed of our binary, rather than the speed of compilation.
codegen-units = 1

[workspace]
resolver = "2"
# These are the packages which are built/tested when the --all flag is passed to cargo.
#
# We need to explicitly list these, because otherwise the standalone tools
# (e.g. fs_util) won't be included when we build/test things.
members = [
  ".",
  "address",
  "async_latch",
  "async_value",
  "cache",
  "client",
  "concrete_time",
  "fs",
  "fs/brfs",
  "fs/fs_util",
  "fs/store",
  "graph",
  "hashing",
  "stdio",
  "logging",
  "nailgun",
  "options",
  "process_execution",
  "process_execution/docker",
  "process_execution/pe_nailgun",
  "process_execution/remote",
  "process_executor",
  "rule_graph",
  "sharded_lmdb",
  "task_executor",
  "testutil",
  "testutil/mock",
  "testutil/local_cas",
  "testutil/local_execution_server",
  "tryfuture",
  "ui",
  "watch",
  "workunit_store",
]

# These are the packages which are built/tested when no special selector flags are passed to cargo.
#
# This is the set of packages which are expected to work on any arbitrary system that checks out the code.
# It should be exactly equivalent to members, except without any packages that require more system
# configuration than we're comfortable doing in our bootstrap scripts.
#
# In particular, it does not contain the fs/brfs package, which will not compile without a fuse installation.
# On Ubuntu, that means installing libfuse-dev. On OSX, that means installing OSXFUSE.
default-members = [
  ".",
  "address",
  "async_latch",
  "async_value",
  "cache",
  "client",
  "concrete_time",
  "dep_inference",
  "fs",
  "fs/fs_util",
  "fs/store",
  "graph",
  "hashing",
  "stdio",
  "logging",
  "nailgun",
  "options",
  "process_execution",
  "process_execution/docker",
  "process_execution/pe_nailgun",
  "process_execution/remote",
  "process_executor",
  "rule_graph",
  "sharded_lmdb",
  "task_executor",
  "testutil",
  "testutil/mock",
  "testutil/local_cas",
  "testutil/local_execution_server",
  "tryfuture",
  "ui",
  "watch",
  "workunit_store",
]

[lib]
crate-type = ["cdylib"]

[features]
# NB: To actually load this crate from python, the `extension-module` feature must be enabled. But
# unfortunately, enabling `extension-module` causes tests linked against `pyo3` to fail. We
# define a feature to enable that, but we do not enable it by default: someone building this module
# in order to extract `libengine.so` should pass `cargo build .. --features=extension-module`.
#  see https://github.com/PyO3/pyo3/issues/340
extension-module = ["pyo3/extension-module"]
default = []

[dependencies]
address = { path = "address" }
async_latch = { path = "async_latch" }
async-trait = "0.1"
protos = { path = "protos" }
bytes = "1.2"
cache = { path = "cache" }
concrete_time = { path = "concrete_time" }
crossbeam-channel = "0.5"
# TODO: Waiting on https://github.com/Aeledfyr/deepsize/pull/{30,31,32}.
deepsize = { git = "https://github.com/stuhood/deepsize.git", rev = "5c8bee5443fcafe4aaa9274490d354412d0955c1", features = [
  "internment",
  "smallvec",
] }
dep_inference = { path = "dep_inference" }
derivative = "2.2"
async-oncecell = "0.2"
docker = { path = "process_execution/docker" }
fnv = "1.0.5"
fs = { path = "fs" }
futures = "0.3"
futures-core = "^0.3.23"
graph = { path = "graph" }
grpc_util = { path = "grpc_util" }
hashing = { path = "hashing" }
humansize = "1.1"
indexmap = "1.9"
internment = "0.6"
itertools = "0.10"
lazy_static = "1"
libc = "0.2.137"
log = "0.4"
logging = { path = "logging" }
nailgun = { path = "nailgun" }
num_enum = "0.5"
parking_lot = "0.12"
petgraph = "0.6"
process_execution = { path = "process_execution" }
pyo3 = "0.19"
rand = "0.8"
regex = "1"
reqwest = { version = "0.11", default_features = false, features = ["stream", "rustls-tls"] }
rule_graph = { path = "rule_graph" }
smallvec = { version = "1", features = ["union"] }
stdio = { path = "stdio" }
store = { path = "fs/store" }
serde_json = "1.0"
task_executor = { path = "task_executor" }
tempfile = "3.5.0"
testutil_mock = { package = "mock", path = "testutil/mock" }
time = "0.3.20"
tokio = { version = "1.28", features = ["macros", "rt", "rt-multi-thread"] }
tokio-retry = "0.3"
tokio-util = { version = "0.7", features = ["io"] }
tryfuture = { path = "tryfuture" }
ui = { path = "ui" }
url = "2.3"
watch = { path = "watch" }
workunit_store = { path = "workunit_store" }
remote = { path = "process_execution/remote" }
pe_nailgun = { path = "process_execution/pe_nailgun" }

[dev-dependencies]
testutil = { path = "./testutil" }
fs = { path = "./fs" }
env_logger = "0.10.0"

[build-dependencies]
pyo3-build-config = "0.18"
