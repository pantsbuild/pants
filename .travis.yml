# Conditions are documented here: https://docs.travis-ci.com/user/conditions-v1
conditions: v1

env:
  global:
    - PANTS_CONFIG_FILES="${TRAVIS_BUILD_DIR}/pants.travis-ci.ini"
    - PYTEST_PASSTHRU_ARGS="-v --duration=3"

cache:
  directories:
    - ${HOME}/.cache/pants
    - ${HOME}/.ivy2/pants
    # TODO(John Sirois): Update this to ~/.npm/pants when pants starts
    # using its own isolated cache:
    #   https://github.com/pantsbuild/pants/issues/2485
    - ${HOME}/.npm
    - build-support/pants_dev_deps.venv
    - src/rust/engine/target

before_cache:
  # Kill all python bytecode in our cached venvs.  Some files appear to
  # get bytecode compiled in non-yet-understood circumstances leading to
  # a full cache re-pack due to new bytecode files.
  - find build-support -name "*.py[co]" -delete
  # The `ivydata-*.properties` & root level `*.{properties,xml}` files'
  # effect on resolution time is in the noise, but they are
  # re-timestamped in internal comments and fields on each run and this
  # leads to travis-ci cache thrash.  Kill these files before the cache
  # check to avoid un-needed cache re-packing and re-upload (a ~100s
  # operation).
  - find ${HOME}/.ivy2/pants -type f -name "ivydata-*.properties" -delete
  - rm -f ${HOME}/.ivy2/pants/*.{css,properties,xml,xsl}
  # We have several tests that do local file:// url resolves for
  # com.example artifacts, these disrupt the cache but are fast since
  # they're resolved from local files when omitted from the cache.
  - rm -rf ${HOME}/.ivy2/pants/com.example
  # The stats cache contains timestamped reports unused by CI but that
  # thrash the cache.  Skip caching these.
  - rm -rf ${HOME}/.cache/pants/stats
  # While the bin directory is relatively large, it's also very quick to restore/install;
  # so prune it to keep the total cache size down. See:
  #   https://docs.travis-ci.com/user/caching/#Things-not-to-cache
  - rm -rf ${HOME}/.cache/pants/bin
  - rm -rf ${HOME}/.cache/pants/lmdb_store
  # Render a summary of what is left in the home directory, to assist with further pruning of
  # the cache.
  - du -d2 ${HOME} | sort -r -n | head -25

# Stages are documented here: https://docs.travis-ci.com/user/build-stages
stages:
  - Build wheels and pants pex
  - Test pants
  - name: Deploy pants pex
    if: tag IS present AND tag =~ ^release_.*$

jobs:
  include:

    - stage: Build wheels and pants pex
      name: OSX Wheel and Pants PEX Builder
      os: osx
      # We request the oldest image we can (corresponding to OSX 10.11) for maximum compatibility.
      # We use 10.11 as a minimum to avoid https://github.com/rust-lang/regex/issues/489.
      # See: https://docs.travis-ci.com/user/reference/osx/#OS-X-Version
      osx_image: xcode8
      language: generic
      before_install: brew update && brew install bash
      script: ./pants --version && ./build-support/bin/release.sh -q && mv dist/pants.*.pex pants.pex
      deploy: &s3_deploy
        # See: https://docs.travis-ci.com/user/deployment/s3/
        provider: s3
        access_key_id: AKIAIWOKBXVU3JLY6EGQ
        secret_access_key:
          secure: "UBVbpdYJ81OsDGKlPRBw6FlPJGlxosnFQ4A1xBbU5GwEBfv90GoKc6J0UwF+I4CDwytj/BlAks1XbW0zYX0oeIlXDnl1Vfikm1k4hfIr6VCLHKppiU69FlEs+ph0Dktz8+aUWhrvJzICZs6Gu08kTBQ5++3ulDWDeTHqjr713YM="
        bucket: binaries.pantsbuild.org
        local_dir: dist/deploy
        # Otherwise travis will stash dist/deploy and the deploy will fail.
        skip_cleanup: true
        acl: public_read

    - stage: Build wheels and pants pex
      name: Linux Wheel and Pants PEX Builder
      os: linux
      dist: trusty
      language: generic
      services:
        - docker
      before_script: ulimit -c unlimited
      script:
        - docker build --rm -t travis_ci
          --build-arg "TRAVIS_USER=$(id -un)"
          --build-arg "TRAVIS_UID=$(id -u)"
          --build-arg "TRAVIS_GROUP=$(id -gn)"
          --build-arg "TRAVIS_GID=$(id -g)"
            build-support/docker/travis_ci/
        # Mount ${HOME} to cache the ${HOME}/.cache/pants/rust-toolchain
        - docker run --rm -t
          -v "${HOME}:/travis/home"
          -v "${TRAVIS_BUILD_DIR}:/travis/workdir"
          travis_ci:latest
          sh -c "./pants --version && ./build-support/bin/release.sh -q  && mv dist/pants.*.pex pants.pex"
      deploy: *s3_deploy

    - &default_test_config
      stage: Test pants
      name: Various pants self checks and lint
      os: linux
      dist: trusty
      sudo: required
      addons:
        apt:
          packages:
            - lib32stdc++6
            - lib32z1
            - lib32z1-dev
            - gcc-multilib
            - python-dev
            - openssl
            - libssl-dev
      language: generic
      before_install:
        # Remove bad openjdk6 from trusty image, so
        # Pants will pick up oraclejdk6 from `packages` above.
        - sudo rm -rf /usr/lib/jvm/java-1.6.0-openjdk-amd64
        - sudo rm -rf /usr/lib/jvm/java-6-openjdk-amd64
        - jdk_switcher use oraclejdk8
      script: ./build-support/bin/ci.sh -cejlpn

    - <<: *default_test_config
      name: Unit tests for pants and pants-plugins - shard 1
      script: ./build-support/bin/ci.sh -efkmrcnt -u 0/2

    - <<: *default_test_config
      name: Unit tests for pants and pants-plugins - shard 2
      script: ./build-support/bin/ci.sh -efkmrcnt -u 1/2

    - <<: *default_test_config
      name: Python contrib tests - shard 1
      script: ./build-support/bin/ci.sh -efkmrcjlpt -y 0/2

    - <<: *default_test_config
      name: Python contrib tests - shard 2
      script: ./build-support/bin/ci.sh -efkmrcjlpt -y 1/2

    - <<: *default_test_config
      name: Python integration tests for pants - shard 1
      script: ./build-support/bin/ci.sh -efkmrjlpnt -i 0/7

    - <<: *default_test_config
      name: Python integration tests for pants - shard 2
      script: ./build-support/bin/ci.sh -efkmrjlpnt -i 1/7

    - <<: *default_test_config
      name: Python integration tests for pants - shard 3
      script: ./build-support/bin/ci.sh -efkmrjlpnt -i 2/7

    - <<: *default_test_config
      name: Python integration tests for pants - shard 4
      script: ./build-support/bin/ci.sh -efkmrjlpnt -i 3/7

    - <<: *default_test_config
      name: Python integration tests for pants - shard 5
      script: ./build-support/bin/ci.sh -efkmrjlpnt -i 4/7

    - <<: *default_test_config
      name: Python integration tests for pants - shard 6
      script: ./build-support/bin/ci.sh -efkmrjlpnt -i 5/7

    - <<: *default_test_config
      name: Python integration tests for pants - shard 7
      script: ./build-support/bin/ci.sh -efkmrjlpnt -i 6/7

    # Run OSX platform-specific tests.
    - stage: Test pants
      os: osx
      osx_image: xcode8
      language: generic
      before_install: brew update && brew install bash
      name: Platform-specific tests for OSX
      script:
        # Specifically avoid the OSX provided 2.7.10 under xcode8.3 since it returns a platform
        # of `macosx-*-intel` where the `intel` suffix is bogus but pex has not yet been taught to
        # deal with this. Can be removed when this issue is resolved:
        # https://github.com/pantsbuild/pex/issues/523
        PANTS_PYTHON_SETUP_INTERPRETER_CONSTRAINTS="['CPython>2.7.10,<3']"
          ./build-support/bin/ci.sh -cfjklmnprtz

    # Test rust code on Linux.
    - stage: Test pants
      name: Rust tests for Linux & fs_util deploy
      os: linux
      dist: trusty
      sudo: required
      language: generic
      addons:
        apt:
          packages:
            - cmake
      before_install:
        - sudo apt-get install -y pkg-config fuse libfuse-dev
        - sudo modprobe fuse
        - sudo chmod 666 /dev/fuse
        - sudo chown root:$USER /etc/fuse.conf
      before_script:
        - ulimit -c unlimited
        - ulimit -n 8192
      script: ./build-support/bin/ci.sh -bcfjklmnprt
      before_deploy: ./build-support/bin/release.sh -u
      deploy: *s3_deploy

    # Test rust code on OSX.
    - stage: Test pants
      name: Rust tests for OSX & fs_util deploy
      os: osx
      # Fuse actually works on this image. It hangs on many others.
      osx_image: xcode8.3
      language: generic
      before_install:
        - brew tap caskroom/cask && brew update && brew cask install osxfuse && brew install bash
      before_script:
        - ulimit -c unlimited
        - ulimit -n 8192
      script: ./build-support/bin/ci.sh -bcfjklmnprt
      before_deploy: ./build-support/bin/release.sh -u
      deploy: *s3_deploy

    # Deploy the OSX / Linux Pants pex saved in S3 to Github releases.
    - stage: Deploy pants pex
      os: linux
      dist: trusty
      language: generic
      script: PANTS_PEX_RELEASE=stable ./build-support/bin/release.sh -p
      deploy:
        # See https://docs.travis-ci.com/user/deployment/releases/
        provider: releases
        # The pantsbuild-ci-bot OAuth token, see the pantsbuild vault for details.
        api_key:
          secure: "u0aCsiuVGOg28YxG0sQUovuUm29kKwQfFgHbNz2TT5L+cGoHxGl4aoVOCtuwWYEtbNGmYc8/3WRS3C/jOiqQj6JEgHUzWOsnfKUObEqNhisAmXbzBbKc0wPQTL8WNK+DKFh32sD3yPYcw+a5PTLO56+o7rqlI25LK7A17WesHC4="
        file_glob: true
        file: dist/deploy/pex/*
        skip_cleanup: true
        on:
          # We only release a pex for Pants releases, which are tagged.
          tags: true
          repo: pantsbuild/pants

# We accept the default travis-ci email author+committer notification
# for now which is enabled even with no `notifications` config.
# notifications:
#   email: ...
