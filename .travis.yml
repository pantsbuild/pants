
# GENERATED, DO NOT EDIT!
# To change, edit build-support/travis/travis.yml.mustache and run
# ./pants --quiet run build-support/travis:generate_travis_yml > .travis.yml


# Conditions are documented here: https://docs.travis-ci.com/user/conditions-v1
conditions: v1

env:
  global:
    - PANTS_CONFIG_FILES="${TRAVIS_BUILD_DIR}/pants.travis-ci.ini"
    - PYTEST_PASSTHRU_ARGS="-v --duration=3"
    - LC_ALL="en_US.UTF-8"
    - BOOTSTRAPPED_PEX_BUCKET=ci-public.pantsbuild.org
    - BOOTSTRAPPED_PEX_KEY=${TRAVIS_BUILD_NUMBER}/${TRAVIS_BUILD_ID}/pants.pex
    - BOOTSTRAPPED_PEX_URL=s3://${BOOTSTRAPPED_PEX_BUCKET}/${BOOTSTRAPPED_PEX_KEY}


before_cache:
  # Ensure permissions to do the below removals, which happen with or without caching enabled.
  - sudo chown -R travis:travis "${HOME}" "${TRAVIS_BUILD_DIR}"
  # Kill all python bytecode in our cached venvs.  Some files appear to
  # get bytecode compiled in non-yet-understood circumstances leading to
  # a full cache re-pack due to new bytecode files.
  - find build-support -name "*.py[co]" -delete
  # The `ivydata-*.properties` & root level `*.{properties,xml}` files'
  # effect on resolution time is in the noise, but they are
  # re-timestamped in internal comments and fields on each run and this
  # leads to travis-ci cache thrash.  Kill these files before the cache
  # check to avoid un-needed cache re-packing and re-upload (a ~100s
  # operation).
  - find ${HOME}/.ivy2/pants -type f -name "ivydata-*.properties" -delete
  - rm -f ${HOME}/.ivy2/pants/*.{css,properties,xml,xsl}
  # We have several tests that do local file:// url resolves for
  # com.example artifacts, these disrupt the cache but are fast since
  # they're resolved from local files when omitted from the cache.
  - rm -rf ${HOME}/.ivy2/pants/com.example
  # The stats cache contains timestamped reports unused by CI but that
  # thrash the cache.  Skip caching these.
  - rm -rf ${HOME}/.cache/pants/stats
  # While the bin directory and rust toolchains are relatively large, they're also very quick to
  # restore/install: prune them to keep the total cache size down.
  #   see https://docs.travis-ci.com/user/caching/#Things-not-to-cache
  # NB: We do _not_ prune the cargo cache, since that holds compiled tools, package indexes and
  # individually resolved crates.
  - rm -rf ${HOME}/.cache/pants/bin
  - rm -rf ${HOME}/.cache/pants/rust/rustup
  - rm -rf ${HOME}/.cache/pants/lmdb_store
  # Render a summary of what is left in the home directory, to assist with further pruning of
  # the cache.
  - du -m -d2 ${HOME} | sort -r -n

cache:
  # The default timeout is 180 seconds, and our larger cache uploads exceed this.
  # TODO: Figure out why we have such large caches (2-7GB) and try to trim them.
  timeout: 500
  directories:
    - ${HOME}/.cache/pants
    - ${HOME}/.ivy2/pants
    # TODO(John Sirois): Update this to ~/.npm/pants when pants starts
    # using its own isolated cache:
    #   https://github.com/pantsbuild/pants/issues/2485
    - ${HOME}/.npm
    - build-support/pants_dev_deps.venv
    - src/rust/engine/target

# Stages are documented here: https://docs.travis-ci.com/user/build-stages
stages:
  - &bootstrap Bootstrap Pants
  - name: &test Test Pants
    if: type != cron
  - name: &cron Cron
    if: type = cron
  - name: &build_stable Deploy Pants Pex
    if: tag IS present AND tag =~ ^release_.*$
  - name: &build_unstable Deploy Pants Pex Unstable
    if: tag IS NOT present AND type NOT IN (pull_request, cron)

default_test_config: &default_test_config
  os: linux
  dist: xenial
  sudo: required
  addons:
    apt:
      packages:
        - lib32stdc++6
        - lib32z1
        - lib32z1-dev
        - gcc-multilib
        - python-dev
        - openssl
        - libssl-dev
  stage: *test
  language: python
  python: &python_version "2.7"
  before_install:
    - PATH="/usr/lib/jvm/java-8-openjdk-amd64/jre/bin":$PATH
    - JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
    # Increase the max number of user watches to ensure that watchman is able to watch all
    # files in the working copy.
    - sudo sysctl fs.inotify.max_user_watches=524288
    - sudo pip install awscli
    # Multipart operations aren't supported for anonymous users, so we set the
    # threshold high to avoid them being used automatically by the aws cli.
    - aws configure set default.s3.multipart_threshold 1024MB
    - sudo apt-get install -y jq unzip
  before_script:
    - ./build-support/bin/get_ci_bootstrapped_pants_pex.sh ${BOOTSTRAPPED_PEX_BUCKET} ${BOOTSTRAPPED_PEX_KEY}


osx_test_config: &osx_test_config
  os: osx
  stage: *test
  language: generic
  script:
    - MODE=debug ./build-support/bin/travis-ci.sh -m

default_cron_test_config: &default_cron_test_config
  <<: *default_test_config
  stage: *cron

linux_with_fuse: &linux_with_fuse
  before_install:
    - PATH="/usr/lib/jvm/java-8-openjdk-amd64/jre/bin":$PATH
    - JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
    # Increase the max number of user watches to ensure that watchman is able to watch all
    # files in the working copy.
    - sudo sysctl fs.inotify.max_user_watches=524288
    - sudo pip install awscli
    # Multipart operations aren't supported for anonymous users, so we set the
    # threshold high to avoid them being used automatically by the aws cli.
    - aws configure set default.s3.multipart_threshold 1024MB
    - sudo apt-get install -y jq unzip
    - sudo apt-get install -y pkg-config fuse libfuse-dev
    - sudo modprobe fuse
    - sudo chmod 666 /dev/fuse
    - sudo chown root:$USER /etc/fuse.conf

matrix:
  include:
    - <<: *default_test_config
      name: "Bootstrap Pants"
      stage: *bootstrap
      before_script:
      script:
        - ./build-support/bin/travis-ci.sh  # With no args this script just bootstraps.
        - aws --no-sign-request --region us-east-1 s3 cp ./pants.pex ${BOOTSTRAPPED_PEX_URL}

    # Build macOS engine
    - name: "OSX Native Engine Binary Builder"
      os: osx
      # We request the oldest image we can (corresponding to OSX 10.11) for maximum compatibility.
      # We use 10.11 as a minimum to avoid https://github.com/rust-lang/regex/issues/489.
      # See: https://docs.travis-ci.com/user/reference/osx/#OS-X-Version
      osx_image: xcode8
      stage: *test
      language: generic
      env:
        - PREPARE_DEPLOY=1
      script:
        - ./pants --version && ./build-support/bin/release.sh -n

    # TODO: Update this to use 10.14 once it is available
    - name: "OSX 10.12 Sanity Check"
      <<: *osx_test_config
      osx_image: xcode9.2

    - name: "OSX 10.13 Sanity Check"
      <<: *osx_test_config
      osx_image: xcode10.1

    # Build Linux engine
    - name: "Linux Native Engine Binary Builder"
      os: linux
      stage: *test
      language: generic
      services:
        - docker
      env:
        - PREPARE_DEPLOY=1
      before_script:
        - ulimit -c unlimited
      script:
        - docker build --rm -t travis_ci
          --build-arg "TRAVIS_USER=$(id -un)"
          --build-arg "TRAVIS_UID=$(id -u)"
          --build-arg "TRAVIS_GROUP=$(id -gn)"
          --build-arg "TRAVIS_GID=$(id -g)"
            build-support/docker/travis_ci/
        # Mount ${HOME} to cache the ${HOME}/.cache/pants/rust-toolchain
        - docker run --rm -t
          -v "${HOME}:/travis/home"
          -v "${TRAVIS_BUILD_DIR}:/travis/workdir"
          travis_ci:latest
          sh -c "git clean -xfd && ./pants --version && ./build-support/bin/release.sh -n"
      after_failure:
        - build-support/bin/ci-failure.sh

    # Deploy Pex Stable
    - name: "Deploy Pants PEX"
      os: linux
      language: python
      stage: *build_stable
      env:
        - PANTS_PEX_RELEASE=stable
      script:
        - ./build-support/bin/release.sh -p
      deploy:
        # See https://docs.travis-ci.com/user/deployment/releases/
        provider: releases
        # The pantsbuild-ci-bot OAuth token, see the pantsbuild vault for details.
        api_key:
          secure: "u0aCsiuVGOg28YxG0sQUovuUm29kKwQfFgHbNz2TT5L+cGoHxGl4aoVOCtuwWYEtbNGmYc8/3WRS3C/jOiqQj6JEgHUzWOsnfKUObEqNhisAmXbzBbKc0wPQTL8WNK+DKFh32sD3yPYcw+a5PTLO56+o7rqlI25LK7A17WesHC4="
        file_glob: true
        file: dist/deploy/pex/*
        skip_cleanup: true
        on:
          # We only release a pex for Pants releases, which are tagged.
          tags: true
          repo: pantsbuild/pants

    # Deploy Pex Unstable to s3
    - name: "Deploy Pants PEX Unstable"
      os: linux
      language: python
      stage: *build_unstable
      env:
        - PREPARE_DEPLOY=1
      script:
        - ./build-support/bin/release.sh -p && mkdir -p dist/deploy/pex/ && mv dist/pants*.pex dist/deploy/pex/

    - <<: *default_test_config
      <<: *linux_with_fuse
      name: "Self checks, lint, and JVM tests"
      script:
        - ./build-support/bin/travis-ci.sh -fbkmrjt

    - <<: *default_test_config
      name: "Py2 - Unit tests for pants and pants-plugins"
      script:
        - ./build-support/bin/travis-ci.sh -blp

    - <<: *default_test_config
      name: "Py3 - Unit tests for pants and pants-plugins"
      script:
        - ./build-support/bin/travis-ci.sh -3blp

    - <<: *default_test_config
      name: "Py2 - Python contrib tests"
      script:
        - ./build-support/bin/travis-ci.sh -bn

    - <<: *default_test_config
      name: "Py3 - Python contrib tests"
      script:
        - ./build-support/bin/travis-ci.sh -3bn

    - <<: *default_test_config
      name: "Integration tests for pants - shard 0"
      env:
        - CACHE_NAME=integrationshard0  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc3 -i 0/20

    - <<: *default_test_config
      name: "Integration tests for pants - shard 1"
      env:
        - CACHE_NAME=integrationshard1  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc3 -i 1/20

    - <<: *default_test_config
      name: "Integration tests for pants - shard 2"
      env:
        - CACHE_NAME=integrationshard2  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc3 -i 2/20

    - <<: *default_test_config
      name: "Integration tests for pants - shard 3"
      env:
        - CACHE_NAME=integrationshard3  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc3 -i 3/20

    - <<: *default_test_config
      name: "Integration tests for pants - shard 4"
      env:
        - CACHE_NAME=integrationshard4  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc3 -i 4/20

    - <<: *default_test_config
      name: "Integration tests for pants - shard 5"
      env:
        - CACHE_NAME=integrationshard5  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc3 -i 5/20

    - <<: *default_test_config
      name: "Integration tests for pants - shard 6"
      env:
        - CACHE_NAME=integrationshard6  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc3 -i 6/20

    - <<: *default_test_config
      name: "Integration tests for pants - shard 7"
      env:
        - CACHE_NAME=integrationshard7  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc3 -i 7/20

    - <<: *default_test_config
      name: "Integration tests for pants - shard 8"
      env:
        - CACHE_NAME=integrationshard8  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc3 -i 8/20

    - <<: *default_test_config
      name: "Integration tests for pants - shard 9"
      env:
        - CACHE_NAME=integrationshard9  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc3 -i 9/20

    - <<: *default_test_config
      name: "Integration tests for pants - shard 10"
      env:
        - CACHE_NAME=integrationshard10  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc3 -i 10/20

    - <<: *default_test_config
      name: "Integration tests for pants - shard 11"
      env:
        - CACHE_NAME=integrationshard11  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc3 -i 11/20

    - <<: *default_test_config
      name: "Integration tests for pants - shard 12"
      env:
        - CACHE_NAME=integrationshard12  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc3 -i 12/20

    - <<: *default_test_config
      name: "Integration tests for pants - shard 13"
      env:
        - CACHE_NAME=integrationshard13  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc3 -i 13/20

    - <<: *default_test_config
      name: "Integration tests for pants - shard 14"
      env:
        - CACHE_NAME=integrationshard14  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc3 -i 14/20

    - <<: *default_test_config
      name: "Integration tests for pants - shard 15"
      env:
        - CACHE_NAME=integrationshard15  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc3 -i 15/20

    - <<: *default_test_config
      name: "Integration tests for pants - shard 16"
      env:
        - CACHE_NAME=integrationshard16  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc3 -i 16/20

    - <<: *default_test_config
      name: "Integration tests for pants - shard 17"
      env:
        - CACHE_NAME=integrationshard17  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc3 -i 17/20

    - <<: *default_test_config
      name: "Integration tests for pants - shard 18"
      env:
        - CACHE_NAME=integrationshard18  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc3 -i 18/20

    - <<: *default_test_config
      name: "Integration tests for pants - shard 19"
      env:
        - CACHE_NAME=integrationshard19  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc3 -i 19/20

    - <<: *default_cron_test_config
      name: "Integration tests for pants (Python 2) - shard 0"
      env:
        - CACHE_NAME=cronshard0  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc -i 0/20

    - <<: *default_cron_test_config
      name: "Integration tests for pants (Python 2) - shard 1"
      env:
        - CACHE_NAME=cronshard1  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc -i 1/20

    - <<: *default_cron_test_config
      name: "Integration tests for pants (Python 2) - shard 2"
      env:
        - CACHE_NAME=cronshard2  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc -i 2/20

    - <<: *default_cron_test_config
      name: "Integration tests for pants (Python 2) - shard 3"
      env:
        - CACHE_NAME=cronshard3  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc -i 3/20

    - <<: *default_cron_test_config
      name: "Integration tests for pants (Python 2) - shard 4"
      env:
        - CACHE_NAME=cronshard4  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc -i 4/20

    - <<: *default_cron_test_config
      name: "Integration tests for pants (Python 2) - shard 5"
      env:
        - CACHE_NAME=cronshard5  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc -i 5/20

    - <<: *default_cron_test_config
      name: "Integration tests for pants (Python 2) - shard 6"
      env:
        - CACHE_NAME=cronshard6  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc -i 6/20

    - <<: *default_cron_test_config
      name: "Integration tests for pants (Python 2) - shard 7"
      env:
        - CACHE_NAME=cronshard7  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc -i 7/20

    - <<: *default_cron_test_config
      name: "Integration tests for pants (Python 2) - shard 8"
      env:
        - CACHE_NAME=cronshard8  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc -i 8/20

    - <<: *default_cron_test_config
      name: "Integration tests for pants (Python 2) - shard 9"
      env:
        - CACHE_NAME=cronshard9  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc -i 9/20

    - <<: *default_cron_test_config
      name: "Integration tests for pants (Python 2) - shard 10"
      env:
        - CACHE_NAME=cronshard10  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc -i 10/20

    - <<: *default_cron_test_config
      name: "Integration tests for pants (Python 2) - shard 11"
      env:
        - CACHE_NAME=cronshard11  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc -i 11/20

    - <<: *default_cron_test_config
      name: "Integration tests for pants (Python 2) - shard 12"
      env:
        - CACHE_NAME=cronshard12  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc -i 12/20

    - <<: *default_cron_test_config
      name: "Integration tests for pants (Python 2) - shard 13"
      env:
        - CACHE_NAME=cronshard13  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc -i 13/20

    - <<: *default_cron_test_config
      name: "Integration tests for pants (Python 2) - shard 14"
      env:
        - CACHE_NAME=cronshard14  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc -i 14/20

    - <<: *default_cron_test_config
      name: "Integration tests for pants (Python 2) - shard 15"
      env:
        - CACHE_NAME=cronshard15  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc -i 15/20

    - <<: *default_cron_test_config
      name: "Integration tests for pants (Python 2) - shard 16"
      env:
        - CACHE_NAME=cronshard16  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc -i 16/20

    - <<: *default_cron_test_config
      name: "Integration tests for pants (Python 2) - shard 17"
      env:
        - CACHE_NAME=cronshard17  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc -i 17/20

    - <<: *default_cron_test_config
      name: "Integration tests for pants (Python 2) - shard 18"
      env:
        - CACHE_NAME=cronshard18  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc -i 18/20

    - <<: *default_cron_test_config
      name: "Integration tests for pants (Python 2) - shard 19"
      env:
        - CACHE_NAME=cronshard19  # Ensure distinct caches.
      script:
        - ./build-support/bin/travis-ci.sh -bc -i 19/20


    # Rust on linux
    - <<: *linux_with_fuse
      name: "Rust Tests Linux"
      os: linux
      dist: xenial
      sudo: required
      stage: *test
      language: python
      python: *python_version
      before_script:
        - ulimit -c unlimited
        - ulimit -n 8192
      script:
        - ./build-support/bin/travis-ci.sh -be
    # Rust on macOS
    - name: "Rust + Platform-specific Tests OSX"
      os: osx
      # Fuse actually works on this image. It hangs on many others.
      osx_image: xcode8.3
      stage: *test
      language: generic
      # TODO: workaround for Homebrew bug triggered by running `brew update`. 
      # Follow at https://github.com/Homebrew/brew/issues/5513 and remove this workaround once its fixed.
      env:
        - HOMEBREW_LOGS=~/homebrew-logs
        - HOMEBREW_TEMP=~/homebrew-temp
      before_install:
        - brew tap caskroom/cask && brew update && brew cask install osxfuse
      before_script:
        - ulimit -c unlimited
        - ulimit -n 8192
      script:
        # Platform-specific tests currently need a pants pex, so we bootstrap here (no -b) and
        # set -z to run the platform-specific tests.
        - ./build-support/bin/travis-ci.sh -ez

    # Rust Clippy on Linux
    - <<: *linux_with_fuse
      name: "Rust Clippy on Linux"
      os: linux
      dist: xenial
      sudo: required
      stage: *test
      language: python
      python: *python_version
      before_script:
        - ulimit -c unlimited
        - ulimit -n 8192
      script:
        - ./build-support/bin/travis-ci.sh -bs

    # Cargo audit
    - <<: *linux_with_fuse
      name: "Cargo audit"
      os: linux
      dist: xenial
      sudo: required
      stage: *cron
      script:
        - ./build-support/bin/travis-ci.sh -ba

deploy:
  # See: https://docs.travis-ci.com/user/deployment/s3/
  provider: s3
  access_key_id: AKIAIWOKBXVU3JLY6EGQ
  secret_access_key:
    secure: "UBVbpdYJ81OsDGKlPRBw6FlPJGlxosnFQ4A1xBbU5GwEBfv90GoKc6J0UwF+I4CDwytj/BlAks1XbW0zYX0oeIlXDnl1Vfikm1k4hfIr6VCLHKppiU69FlEs+ph0Dktz8+aUWhrvJzICZs6Gu08kTBQ5++3ulDWDeTHqjr713YM="
  bucket: binaries.pantsbuild.org
  local_dir: dist/deploy
  # Otherwise travis will stash dist/deploy and the deploy will fail.
  skip_cleanup: true
  acl: public_read
  on:
    condition: $PREPARE_DEPLOY = 1
    # NB: We mainly want deploys for `master` commits; but we also need new binaries for stable
    # release branches; eg `1.3.x`
    all_branches: true
    repo: pantsbuild/pants

