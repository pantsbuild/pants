
# GENERATED, DO NOT EDIT!
# To change, edit build-support/travis/travis.yml.mustache and run
# ./pants --quiet run build-support/travis:generate_travis_yml > .travis.yml
#
# Tip: Copy the generated `.travis.yml` into https://yamlvalidator.com to validate the YAML
# and see how the entries resolve to normalized JSON (helpful to debug anchors).


# Conditions are documented here: https://docs.travis-ci.com/user/conditions-v1
conditions: v1

if: commit_message !~ SKIP_FULL_CI

# -------------------------------------------------------------------------
# Global setup
# -------------------------------------------------------------------------

env:
  global:
    - PANTS_CONFIG_FILES="${TRAVIS_BUILD_DIR}/pants.travis-ci.ini"
    - LC_ALL="en_US.UTF-8"
    # This tells the ./pants runner script to avoid trying to clean the workspace when changing
    # python versions. CI starts off without the .python-interpreter-constraints file, so it would otherwise
    # run a clean-all without this env var.
    - ONLY_USING_SINGLE_PYTHON_VERSION='true'
    - BOOTSTRAPPED_PEX_BUCKET=ci-public.pantsbuild.org
    - BOOTSTRAPPED_PEX_KEY_PREFIX=${TRAVIS_BUILD_NUMBER}/${TRAVIS_BUILD_ID}/pants.pex
    - BOOTSTRAPPED_PEX_URL_PREFIX=s3://${BOOTSTRAPPED_PEX_BUCKET}/${BOOTSTRAPPED_PEX_KEY_PREFIX}
    - PYENV_PY36_VERSION=3.6.8
    - PYENV_PY37_VERSION=3.7.2
    # NB: Linux shards use Pyenv to pre-install Python. We must not override
    # PYENV_ROOT on those shards, or their Python will no longer work.
    - PYENV_ROOT="${PYENV_ROOT:-${HOME}/.pants_pyenv}"
    - PATH="${PYENV_ROOT}/shims:${PATH}"
    - AWS_CLI_ROOT="${HOME}/.aws_cli"

# Stages are documented here: https://docs.travis-ci.com/user/build-stages
stages:
  - name: &bootstrap Bootstrap Pants
    if: type != cron
  - name: &bootstrap_cron Bootstrap Pants (Cron)
    if: type = cron
  - name: &test Test Pants
    if: type != cron
  - name: &test_cron Test Pants (Cron)
    if: type = cron
  - name: &build_stable Deploy Pants Pex
    if: tag IS present AND tag =~ ^release_.*$
  - name: &build_unstable Deploy Pants Pex Unstable
    if: tag IS NOT present AND type NOT IN (pull_request, cron)

# -------------------------------------------------------------------------
# Cache config
# -------------------------------------------------------------------------

# Travis cache config for jobs that build the native engine.
native_engine_cache_config: &native_engine_cache_config
  before_cache:
    # Ensure permissions to do the below removals, which happen with or without caching enabled.
    - sudo chown -R travis:travis "${HOME}" "${TRAVIS_BUILD_DIR}"
    # Kill all python bytecode in our cached venvs.  Some files appear to
    # get bytecode compiled in non-yet-understood circumstances leading to
    # a full cache re-pack due to new bytecode files.
    - find build-support -name "*.py[co]" -delete
  cache:
    # The default timeout is 180 seconds, and our larger cache uploads exceed this.
    # TODO: Figure out why we have such large caches (2-7GB) and try to trim them.
    timeout: 500
    directories:
      - ${AWS_CLI_ROOT}
      - ${PYENV_ROOT}
      - ${HOME}/.cache/pants/rust/cargo
      - build-support/pants_dev_deps.py27.venv
      - build-support/pants_dev_deps.py36.venv
      - build-support/pants_dev_deps.py37.venv
      - src/rust/engine/target

# Travis cache config for jobs that run a bootstrapped pants.pex.
pants_run_cache_config: &pants_run_cache_config
  before_cache:
    # Ensure permissions to do the below removals, which happen with or without caching enabled.
    - sudo chown -R travis:travis "${HOME}" "${TRAVIS_BUILD_DIR}"
    # The `ivydata-*.properties` & root level `*.{properties,xml}` files'
    # effect on resolution time is in the noise, but they are
    # re-timestamped in internal comments and fields on each run and this
    # leads to travis-ci cache thrash.  Kill these files before the cache
    # check to avoid un-needed cache re-packing and re-upload (a ~100s
    # operation).
    - find ${HOME}/.ivy2/pants -type f -name "ivydata-*.properties" -delete
    - rm -f ${HOME}/.ivy2/pants/*.{css,properties,xml,xsl}
    # We have several tests that do local file:// url resolves for
    # com.example artifacts, these disrupt the cache but are fast since
    # they're resolved from local files when omitted from the cache.
    - rm -rf ${HOME}/.ivy2/pants/com.example
    # Render a summary to assist with further tuning the cache.
    - du -m -d2 ${HOME}/.cache/pants | sort -r -n
  cache:
    # The default timeout is 180 seconds, and our larger cache uploads exceed this.
    # TODO: Figure out why we have such large caches (2-7GB) and try to trim them.
    timeout: 500
    directories:
      - ${AWS_CLI_ROOT}
      - ${PYENV_ROOT}
      - ${HOME}/.cache/pants/tools
      - ${HOME}/.cache/pants/zinc
      - ${HOME}/.ivy2/pants
      # TODO(John Sirois): Update this to ~/.npm/pants when pants starts
      # using its own isolated cache:
      #   https://github.com/pantsbuild/pants/issues/2485
      - ${HOME}/.npm

# -------------------------------------------------------------------------
# AWS
# -------------------------------------------------------------------------

# We use AWS S3 to avoid unnecessary work in CI. Specifically, the bootstrap
# shards create a pants.pex, and then upload it to S3 for all of the test
# shards to pull down.

aws_deploy_pants_pex: &aws_deploy_pants_pex >
  aws --no-sign-request --region us-east-1 s3 cp ${TRAVIS_BUILD_DIR}/pants.pex ${BOOTSTRAPPED_PEX_URL_PREFIX}.${BOOTSTRAPPED_PEX_KEY_SUFFIX}

aws_get_pants_pex: &aws_get_pants_pex >
  ./build-support/bin/get_ci_bootstrapped_pants_pex.sh ${BOOTSTRAPPED_PEX_BUCKET} ${BOOTSTRAPPED_PEX_KEY_PREFIX}.${BOOTSTRAPPED_PEX_KEY_SUFFIX}

# -------------------------------------------------------------------------
# Generic shard setups
# -------------------------------------------------------------------------

base_osx_config: &base_osx_config
  os: osx
  language: generic
  addons:
    brew:
      packages:
      - openssl
  before_install:
    - curl -L https://github.com/stedolan/jq/releases/download/jq-1.5/jq-osx-amd64 -o /usr/local/bin/jq
    - chmod 755 /usr/local/bin/jq
    - ./build-support/bin/install_aws_cli_for_ci.sh
    - ./build-support/bin/install_python_for_ci.sh "${PYENV_PY36_VERSION}"

py27_osx_config: &py27_osx_config
  <<: *base_osx_config
  env:
    - &py27_osx_config_env >
      PATH="/usr/local/opt/openssl/bin:$PATH"
      LDFLAGS="-L/usr/local/opt/openssl/lib"
      CPPFLAGS="-I/usr/local/opt/openssl/include"

py36_osx_config: &py36_osx_config
  <<: *base_osx_config
  env:
    - &py36_osx_config_env >
      PATH="/usr/local/opt/openssl/bin:$PATH"
      LDFLAGS="-L/usr/local/opt/openssl/lib"
      CPPFLAGS="-I/usr/local/opt/openssl/include"

py37_osx_config: &py37_osx_config
  <<: *base_osx_config
  env:
    - &py37_osx_config_env >
      PATH="/usr/local/opt/openssl/bin:$PATH"
      LDFLAGS="-L/usr/local/opt/openssl/lib"
      CPPFLAGS="-I/usr/local/opt/openssl/include"
  before_install:
    - curl -L https://github.com/stedolan/jq/releases/download/jq-1.5/jq-osx-amd64 -o /usr/local/bin/jq
    - chmod 755 /usr/local/bin/jq
    - ./build-support/bin/install_aws_cli_for_ci.sh
    - ./build-support/bin/install_python_for_ci.sh "${PYENV_PY37_VERSION}"

# -------------------------------------------------------------------------
# Bootstrap engine shards
# -------------------------------------------------------------------------

# Note for each platform, we have the Python 2.7 shard also create fs_util and
# upload to S3, to take advantage of the Rust code built during
# bootstrapping. We must use the Python 2.7 shard, as it is the only Build Engine
# shard to run during both daily and nightly CI. This requires setting
# PREPARE_DEPLOY=1.

base_osx_build_engine: &base_osx_build_engine
  <<: *native_engine_cache_config
  stage: *bootstrap
  # We request the oldest image we can (corresponding to OSX 10.11) for maximum compatibility.
  # We use 10.11 as a minimum to avoid https://github.com/rust-lang/regex/issues/489.
  # See: https://docs.travis-ci.com/user/reference/osx/#OS-X-Version
  osx_image: xcode8
  after_failure:
    - ./build-support/bin/ci-failure.sh

py27_osx_build_engine: &py27_osx_build_engine
  <<: *py27_osx_config
  <<: *base_osx_build_engine
  name: "Build OSX native engine and pants.pex (Py2.7 PEX)"
  env:
    - *py27_osx_config_env
    - PREPARE_DEPLOY=1
    - CACHE_NAME=osxpexbuild.py27
    - BOOTSTRAPPED_PEX_KEY_SUFFIX=py27.osx
  script:
    - ./build-support/bin/ci.sh -2b
    #  Also build fs_util.
    - ./build-support/bin/release.sh -f
    - *aws_deploy_pants_pex

py36_osx_build_engine: &py36_osx_build_engine
  <<: *py36_osx_config
  <<: *base_osx_build_engine
  name: "Build OSX native engine and pants.pex (Py3.6 PEX)"
  env:
    - *py36_osx_config_env
    - CACHE_NAME=osxpexbuild.py36
    - BOOTSTRAPPED_PEX_KEY_SUFFIX=py36.osx
  script:
    - ./build-support/bin/ci.sh -b
    - *aws_deploy_pants_pex

py37_osx_build_engine: &py37_osx_build_engine
  <<: *py37_osx_config
  <<: *base_osx_build_engine
  stage: *bootstrap_cron
  name: "Build OSX native engine and pants.pex (Py3.7 PEX)"
  env:
    - *py37_osx_config_env
    - CACHE_NAME=osxpexbuild.py37
    - BOOTSTRAPPED_PEX_KEY_SUFFIX=py37.osx
  script:
    - ./build-support/bin/ci.sh -7b
    - *aws_deploy_pants_pex

# -------------------------------------------------------------------------
# Build wheels
# -------------------------------------------------------------------------

# N.B. With Python 2, we must build pantsbuild.pants with both UCS2 and UCS4 to provide full
# compatibility for end users. This is because we constrain our ABI due to the native engine.
# See https://www.python.org/dev/peps/pep-0513/#ucs-2-vs-ucs-4-builds. Note this distinction is
# not necessary with Python 3.3+ due to flexible storage of Unicode strings (https://www.python.org/dev/peps/pep-0393/).
#
# We treat both Linux UCS4 and OSX UCS2 normally, as these are the defaults for those environments.
# The Linux UCS2 and OSX UCS4 shards, however, must rebuild Python with
# `PYTHON_CONFIGURE_OPTS=--enable-unicode=ucs{2,4}` set, along with bootstrapping Pants again rather
# than pulling the PEX from AWS.

base_build_wheels: &base_build_wheels
  stage: *test
  env:
    - &base_build_wheels_env PREPARE_DEPLOY=1

base_osx_build_wheels: &base_osx_build_wheels
  <<: *base_build_wheels
  osx_image: xcode8

py27_osx_build_wheels_ucs2: &py27_osx_build_wheels_ucs2
  <<: *py27_osx_test_config
  <<: *base_osx_build_wheels
  name: "Build wheels - OSX and cp27m (UCS2)"
  env:
    - *py27_osx_test_config_env
    - *base_build_wheels_env
    - CACHE_NAME=osxwheelsbuild.ucs2
  script:
    - ./build-support/bin/check_pants_pex_abi.py cp27m
    - RUN_PANTS_FROM_PEX=1 ./build-support/bin/release.sh -n

py27_osx_build_wheels_ucs4: &py27_osx_build_wheels_ucs4
  <<: *py27_osx_config
  <<: *base_osx_build_wheels
  <<: *native_engine_cache_config
  name: "Build wheels - OSX and cp27mu (UCS4)"
  env:
    - *py27_osx_config_env
    - *base_build_wheels_env
    - CACHE_NAME=osxwheelsbuild.ucs4
    - PYTHON_CONFIGURE_OPTS=--enable-unicode=ucs4
    # We ensure selection of the the UCS4 interpreter by the pants script and pants.pex with these
    # env vars.
    - PYTHON_27_VERSION_UCS4=2.7.13
    - PY=${PYENV_ROOT}/shims/python2.7
    - PEX_PYTHON_PATH=${PYENV_ROOT}/shims/python2.7
    - PANTS_PYTHON_SETUP_INTERPRETER_CONSTRAINTS="['CPython==${PYTHON_27_VERSION_UCS4}']"
  before_install:
    - curl -L https://github.com/stedolan/jq/releases/download/jq-1.5/jq-osx-amd64 -o /usr/local/bin/jq
    - chmod 755 /usr/local/bin/jq
    - ./build-support/bin/install_aws_cli_for_ci.sh
    - ./build-support/bin/install_python_for_ci.sh ${PYTHON_27_VERSION_UCS4} ${PYENV_PY36_VERSION}
  script:
    - ./build-support/bin/ci.sh -2b
    - ./build-support/bin/check_pants_pex_abi.py cp27mu
    - RUN_PANTS_FROM_PEX=1 ./build-support/bin/release.sh -n

py36_osx_build_wheels: &py36_osx_build_wheels
  <<: *py36_osx_test_config
  <<: *base_osx_build_wheels
  name: "Build wheels - OSX and abi3 (Py3.6+)"
  env:
    - *py36_osx_test_config_env
    - *base_build_wheels_env
    - CACHE_NAME=osxwheelsbuild.abi3
  script:
    - ./build-support/bin/check_pants_pex_abi.py abi3 cp36m
    - RUN_PANTS_FROM_PEX=1 ./build-support/bin/release.sh -3n

