[GLOBAL]
pants_version = "2.17.1"
print_stacktrace = true

# Enable our custom loose-source plugins.
pythonpath = ["%(buildroot)s/pants-plugins"]
backend_packages.add = [
  "pants.backend.build_files.fix.deprecations",
  "pants.backend.build_files.fmt.black",
  "pants.backend.python",
  "pants.backend.experimental.python.packaging.pyoxidizer",
  "pants.backend.python.lint.autoflake",
  "pants.backend.python.lint.black",
  "pants.backend.python.lint.docformatter",
  "pants.backend.python.lint.flake8",
  "pants.backend.python.lint.isort",
  "pants.backend.python.typecheck.mypy",
  "pants.backend.python.mixed_interpreter_constraints",
  "pants.backend.shell",
  "pants.backend.shell.lint.shellcheck",
  "pants.backend.shell.lint.shfmt",
  "pants.backend.docker",
  "pants.backend.docker.lint.hadolint",
  "pants.backend.experimental.adhoc",
  "pants.backend.experimental.go",
  "pants.backend.experimental.java",
  "pants.backend.experimental.java.lint.google_java_format",
  "pants.backend.experimental.java.debug_goals",
  "pants.backend.experimental.javascript",
  "pants.backend.experimental.javascript.lint.prettier",
  "pants.backend.experimental.python",
  "pants.backend.experimental.python.packaging.pyoxidizer",
  "pants.backend.experimental.scala",
  "pants.backend.experimental.scala.lint.scalafmt",
  "pants.backend.experimental.scala.debug_goals",
  "pants.backend.experimental.tools.workunit_logger",
  "pants.backend.experimental.visibility",
  "pants.backend.tools.preamble",
  "pants.backend.tools.taplo"
]
plugins = [
  "hdrhistogram", # For use with `--stats-log`.
]

# The invalidation globs cover the PYTHONPATH by default, but we exclude some files that are on the
# path but not consumed by python, and additionally add the rust code.
pantsd_invalidation_globs.add = [
  "!*_test.py",
  "!BUILD",
  "!src/python/pants_release/**",
  # NB: The `target` directory is ignored via `pants_ignore` below.
  "src/rust/engine/**/*.rs",
  "src/rust/engine/**/*.toml",
]
# Path patterns to ignore for filesystem operations on top of the builtin patterns.
pants_ignore.add = [
  # venv directories under build-support.
  "/build-support/*.venv/",
  # We shouldn't walk or watch the rust compiler artifacts because it is slow.
  "/src/rust/engine/target",
  # We want to .gitignore Java .class files, but pants should pay attention to them.
  "!*.class",
  # We also want to override the .gitignore'd pants.pex file
  "!/pants.pex",
  # Ignore node modules for docs processing tools
  "/docs/node_modules",
  # We have Pants stuff in here
  "!.github/",
]

build_ignore.add = [
  # Disable Go targets by default so Pants developers do not need Go installed.
  "testprojects/src/go/**",
]

unmatched_build_file_globs = "error"

# TODO: We would like to be able to use `validate` or `defer` here, but further hardening of
# network codepaths is needed. See:
#   https://github.com/pantsbuild/pants/issues/16096.
cache_content_behavior = "fetch"

[DEFAULT]
# Tell `scie-pants` to use our `./pants` bootstrap script.
delegate_bootstrap = true

[anonymous-telemetry]
enabled = true
repo_id = "7775F8D5-FC58-4DBC-9302-D00AE4A1505F"

[cli.alias]
run-pyupgrade = "--backend-packages=pants.backend.experimental.python.lint.pyupgrade fmt"

[source]
root_patterns = [
  "src/*",
  "test/*",
  "tests/*",
  "3rdparty/*",
  "/build-support/bin",
  "/build-support/flake8",
  "/build-support/migration-support",
  "/pants-plugins",
  "/",
  "pants_src/"
]

