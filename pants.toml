# All of the following are seeded with defaults in the config
#   user: the current user
#   homedir: the current user's home directory
#   buildroot: the root of this repo
#   pants_bootstrapdir: the global pants scratch space primarily used for caches
#   pants_configdir: the global pants storage for config files
#   pants_supportdir: pants support files for this repo go here
#   pants_distdir: user visible artifacts for this repo go here
#   pants_workdir: the scratch space used to for live builds in this repo


# [DEFAULT] should only contain variables to be used later in this config or
# options not in global scope but available in certain subsystems or tasks.
[DEFAULT]
# TODO: Still needed until we migrate jvm tools to subsystems.
jvm_options = ["-Xmx1g"]
local_artifact_cache = "%(pants_bootstrapdir)s/artifact_cache"

# [GLOBAL] should only contain valid options in global scope.
[GLOBAL]
print_exception_stacktrace = true
v2 = false

# Enable our own custom loose-source plugins as well as contribs.
pythonpath = [
  "%(buildroot)s/contrib/mypy/src/python",
  "%(buildroot)s/pants-plugins/src/python",
]
backend_packages.add = [
  "internal_backend.repositories",
  "internal_backend.utilities",
]
backend_packages2.add = [
  "pants.backend.awslambda.python",
  "pants.backend.native",
  "pants.backend.python",
  "pants.backend.python.lint.black",
  "pants.backend.python.lint.docformatter",
  "pants.backend.python.lint.flake8",
  "pants.backend.python.lint.isort",
  "internal_backend.rules_for_testing",
]

# The invalidation globs cover the PYTHONPATH by default, but we exclude some files that are on the
# path but not consumed by python, and additionally add the rust code.
pantsd_invalidation_globs.add = [
  "!*_test.py",
  "!BUILD",
  # NB: The `target` directory is ignored via `pants_ignore` below.
  "src/rust/engine/**/*.rs",
  "src/rust/engine/**/*.toml",
]
# Path patterns to ignore for filesystem operations on top of the builtin patterns.
pants_ignore.add = [
  # venv directories under build-support.
  "/build-support/virtualenvs/",
  "/build-support/*.venv/",
  # An absolute symlink to the Pants Rust toolchain sources.
  "/build-support/bin/native/src",
  # We shouldn't walk or watch the rust compiler artifacts because it is slow.
  "/src/rust/engine/target",
  # We want to .gitignore Java .class files, but pants should pay attention to them.
  "!*.class",
  # We also want to override the .gitignore'd pants.pex file
  "!/pants.pex",
]

[source]
root_patterns = [
  "src/*",
  "src/main/*",
  "src/test/*",
  "test/*",
  "tests/*",
  "3rdparty/*",
  "/build-support/bin",
  "/build-support/migration-support"
]

[cache]
# Caching is on globally by default, but we disable it here for development purposes.
# It is explicitly re-enabled below for [cache.bootstrap] only.
read_from = []
write_to = []

[cache.bootstrap]
# The just-in-time tool shading performed by jvm tool bootstrapping is very expensive, so we turn
# on artifact caching for it that can survive clean-all.
read_from = ["%(local_artifact_cache)s"]
write_to = ["%(local_artifact_cache)s"]

[gen.thrift-java]
deps = ["3rdparty:thrift"]

[gen.thrift-py]
deps = ["examples/3rdparty/python:thrift"]

[black]
config = "pyproject.toml"

[docformatter]
args = ["--wrap-summaries=100", "--wrap-descriptions=100"]

[flake8]
config = "build-support/flake8/.flake8"
extra_requirements.add = [
  "flake8-pantsbuild>=2.0,<3",
  "flake8-2020>=1.6.0,<1.7.0"
]

[isort]
config = [".isort.cfg", "contrib/.isort.cfg", "examples/.isort.cfg"]

[pants-releases]
branch_notes = """
{
  'master': 'src/python/pants/notes/master.rst',
  '1.0.x': 'src/python/pants/notes/1.0.x.rst',
  '1.1.x': 'src/python/pants/notes/1.1.x.rst',
  '1.2.x': 'src/python/pants/notes/1.2.x.rst',
  '1.3.x': 'src/python/pants/notes/1.3.x.rst',
  '1.4.x': 'src/python/pants/notes/1.4.x.rst',
  '1.5.x': 'src/python/pants/notes/1.5.x.rst',
  '1.6.x': 'src/python/pants/notes/1.6.x.rst',
  '1.7.x': 'src/python/pants/notes/1.7.x.rst',
  '1.8.x': 'src/python/pants/notes/1.8.x.rst',
  '1.9.x': 'src/python/pants/notes/1.9.x.rst',
  '1.10.x': 'src/python/pants/notes/1.10.x.rst',
  '1.11.x': 'src/python/pants/notes/1.11.x.rst',
  '1.12.x': 'src/python/pants/notes/1.12.x.rst',
  '1.13.x': 'src/python/pants/notes/1.13.x.rst',
  '1.14.x': 'src/python/pants/notes/1.14.x.rst',
  '1.15.x': 'src/python/pants/notes/1.15.x.rst',
  '1.16.x': 'src/python/pants/notes/1.16.x.rst',
  '1.17.x': 'src/python/pants/notes/1.17.x.rst',
  '1.18.x': 'src/python/pants/notes/1.18.x.rst',
  '1.19.x': 'src/python/pants/notes/1.19.x.rst',
  '1.20.x': 'src/python/pants/notes/1.20.x.rst',
  '1.21.x': 'src/python/pants/notes/1.21.x.rst',
  '1.22.x': 'src/python/pants/notes/1.22.x.rst',
  '1.23.x': 'src/python/pants/notes/1.23.x.rst',
  '1.24.x': 'src/python/pants/notes/1.24.x.rst',
  '1.25.x': 'src/python/pants/notes/1.25.x.rst',
  '1.26.x': 'src/python/pants/notes/1.26.x.rst',
  '1.27.x': 'src/python/pants/notes/1.27.x.rst',
  '1.28.x': 'src/python/pants/notes/1.28.x.rst',
  '1.29.x': 'src/python/pants/notes/1.29.x.rst',
  '1.30.x': 'src/python/pants/notes/1.30.x.rst',
}
"""

[python-setup]
interpreter_cache_dir = "%(pants_bootstrapdir)s/python_cache/interpreters"
resolver_cache_dir = "%(pants_bootstrapdir)s/python_cache/requirements"

[pytest]
pytest_plugins.add = [
  # TODO(#8651): We need this until we switch to implicit namespace packages so that pytest-cov
  #  understands our __init__ files. NB: this version matches 3rdparty/python/requirements.txt.
  "setuptools==47.3.1",
  "ipdb",
  "pytest-icdiff",
  "pygments",
]
timeout_default = 60

[test.pytest]
timeout_default = 60

[native-build-step.cpp-compile-settings]
# TensorFlow 1.13 on python 3.7 specifically uses a newer C++ ABI than any other TensorFlow release,
# so in this repo's CI we override this option to avoid using the previous ABI for our python 3.7
# testing by setting PANTS_NATIVE_BUILD_STEP_CPP_COMPILE_SETTINGS_DEFAULT_COMPILER_OPTION_SETS="[]"
# in the environment.
default_compiler_option_sets = ['glibcxx_use_old_abi']
# TensorFlow custom operators cannot be built against the C++11 ABI yet: see
# https://www.tensorflow.org/guide/extend/op.
compiler_option_sets_enabled_args = "{'glibcxx_use_old_abi': ['-D_GLIBCXX_USE_CXX11_ABI=0']}"
compiler_option_sets_disabled_args = "{'glibcxx_use_old_abi': ['-D_GLIBCXX_USE_CXX11_ABI=1']}"

[libc]
enable_libc_search = true

[sourcefile-validation]
config = "@build-support/regexes/config.yaml"
