#!/usr/bin/env bash
# Copyright 2014 Pants project contributors (see CONTRIBUTORS.md).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

REPO_ROOT=$(cd $(dirname "${BASH_SOURCE[0]}") && cd .. && pwd -P)
source ${REPO_ROOT}/build-support/common.sh

REQUIREMENTS=(
  ${REPO_ROOT}/3rdparty/python/requirements.txt
  ${REPO_ROOT}/3rdparty/python/twitter/commons/requirements.txt
  ${REPO_ROOT}/pants-plugins/3rdparty/python/requirements.txt
)

venv_dir_prefix="${REPO_ROOT}/build-support/pants_dev_deps"

# N.B. this function would better belong in `virutalenv`, which focuses on discovering which Python
# binary to use and thus is a natural fit for this function. However, this must be defined here
# to avoid a circular dependency, as `pants_venv` calls `virtualenv` so cannot rely on a function
# defined within `virtualenv`. This function will resolve to the same Python binary that
# `virtualenv` resolves to because both will use the same command `python3` when
# PANTS_USE_PYTHON3_UNCONSTRAINED is true.
function determine_specific_py3_version() {
  version_number="$(python3 -c 'import sys; print(sys.version_info[1])')"
  case "${version_number}" in
    6) echo "36" ;;
    7) echo "37" ;;
    *) die "Pants cannot run with Python 3.${version_number}. You must use either Python 2.7, 3.6, or 3.7." ;;
  esac
}

function venv_dir() {
  if [ "${PANTS_USE_PYTHON3_UNCONSTRAINED}" = true ]; then
    py_venv_version="$(determine_specific_py3_version)"
  elif [ "${PANTS_USE_PYTHON36}" = true ]; then
    py_venv_version="36"
  elif [ "${PANTS_USE_PYTHON37}" = true ]; then
    py_venv_version="37"
  else
    py_venv_version="27"
  fi
  echo "${venv_dir_prefix}.py${py_venv_version}.venv"
}

function activate_venv() {
  source "$(venv_dir)/bin/activate"
}

function remove_venv() {
  rm -rf "$(venv_dir)"
  # If `pants_dev_deps.venv` or `pants_dev_deps.py{2,3}.venv` still exist, delete both the legacy folders
  # and the cached Python interpreter folder, which contains problematic symlinks.
  # Note we only perform these removals for the first time, to avoid continually deleting
  # the cache when switching between using `pants_dev_deps.py{27,36,37}.venv`.
  legacy_venv_dirs=("${venv_dir_prefix}.venv" "${venv_dir_prefix}.py2.venv" "${venv_dir_prefix}.py3.venv")
  for legacy_venv_dir in "${legacy_venv_dirs[@]}"; do
    if [ -d "${legacy_venv_dir}" ]; then
      rm -rf "${legacy_venv_dirs[@]}"
      rm -rf "${HOME}/.cache/pants/python_cache/interpreters"
    fi
  done
}

function create_venv() {
  remove_venv
  "${REPO_ROOT}/build-support/virtualenv" "$(venv_dir)"
}

function ensure_gcc() {
  GCC_VERSION=$(gcc -v 2>&1)
  if (( $? != 0 )); then
    die "$(cat << MESSAGE
ERROR: unable to execute 'gcc'. Please verify that your compiler is installed, in your
       \$PATH and functional.

Hint: on Mac OS X, you may need to accept the XCode EULA: 'sudo xcodebuild -license accept'.
MESSAGE
)"
  fi
  # Prevent bootstrapping failure due to unrecognized flag:
  # https://github.com/pantsbuild/pants/issues/78
  if [[ "$GCC_VERSION" == *503.0.38* ]]; then
    # Required for clang version 503.0.38
    export ARCHFLAGS=-Wno-error=unused-command-line-argument-hard-error-in-future
  fi
}

function activate_pants_venv() {
  fingerprint=""
  for req in ${REQUIREMENTS[@]}; do
    fingerprint="${fingerprint}$(cat ${req} | fingerprint_data)"
  done
  fingerprint=$(echo "${fingerprint}" | fingerprint_data)

  BOOTSTRAPPED_FILE="$(venv_dir)/BOOTSTRAPPED.${fingerprint}"

  if ! [ -f ${BOOTSTRAPPED_FILE} ]; then
    log "Bootstrapping pants_deps with requirements:"
    # Use -f ${REPO_ROOT}/third_party if patching in local dependencies like so
    # pip_extra="-f ${REPO_ROOT}/third_party"
    pip_extra=""

    for req in ${REQUIREMENTS[@]}; do
      log "  ${req}"
    done

    create_venv || die "Failed to create venv."
    activate_venv || die "Failed to activate venv."

    # Needed for compilation of native python distributions.
    ensure_gcc

    for req in ${REQUIREMENTS[@]}; do
      pip install ${pip_extra} -r "${req}" || \
        die "Failed to install requirements from ${req}."
    done
    touch "${BOOTSTRAPPED_FILE}"
  else
    activate_venv || die "Failed to activate venv."
  fi
}

