#!/usr/bin/env bash

set -o errexit

readonly REPO_ROOT=$(cd $(dirname "${BASH_SOURCE[0]}") && cd .. && pwd -P)
source ${REPO_ROOT}/build-support/common.sh

readonly NATIVE_ROOT="${REPO_ROOT}/src/rust/engine"
readonly MODE=debug
readonly MODE_FLAG=

# TODO(John Sirois): Eliminate this replication of BinaryUtil logic internal to pants code when
# https://github.com/pantsbuild/pants/issues/4006 is complete.
readonly KERNEL=$(uname -s)
# NB: ${varname,,} is a very cryptic way to lowercase a variable's contents in bash.
case "${KERNEL,,}" in
  linux)
    readonly EXTENSION=so
    readonly OS_ID=linux/$(uname -m)
    ;;
  darwin)
    readonly EXTENSION=dylib
    readonly OS_ID=mac/$(sw_vers -productVersion | cut -d: -f2 | tr -d ' \t' | cut -d. -f1-2)
    ;;
  *)
    die "Unknown kernel ${KERNEL}, cannot bootstrap pants native code!"
esac

VERSION=0.0.1

readonly CACHE_ROOT=${XDG_CACHE_HOME:-$HOME/.cache}/pants
CACHE_TARGET_DIR=${CACHE_ROOT}/bin/native-engine/${OS_ID}/${VERSION}

function calculate_current_hash() {
  find ${NATIVE_ROOT} -type f | git hash-object -t blob --stdin-paths | fingerprint_data
}

function read_built_at_hash() {
  cat ${CACHE_TARGET_DIR}/built_at_hash 2>/dev/null
}

function write_built_at_hash() {
  local hash=$1
  echo ${hash} > ${CACHE_TARGET_DIR}/built_at_hash
}

function check_prerequisites() {
  if ! which cargo &>/dev/null
  then
    log "A rust installation could not be found, please follow the instructions at"
    die "https://www.rustup.rs/ to setup a stable rust distribution on your machine."
  fi
}

function bootstrap_native_code() {
  check_prerequisites

  current_hash=$(calculate_current_hash)
  if [[ "${current_hash}" != "$(read_built_at_hash)" ]]
  then
    cargo build --manifest-path ${NATIVE_ROOT}/Cargo.toml ${MODE_FLAG}
    mkdir -p ${CACHE_TARGET_DIR}
    ln -f ${NATIVE_ROOT}/target/${MODE}/libengine.${EXTENSION} ${CACHE_TARGET_DIR}/native-engine
    write_built_at_hash ${current_hash}
  fi
}
