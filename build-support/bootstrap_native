#!/usr/bin/env bash

readonly REPO_ROOT=$(cd $(dirname "${BASH_SOURCE[0]}") && cd .. && pwd -P)
source ${REPO_ROOT}/build-support/common.sh

readonly NATIVE_ROOT="${REPO_ROOT}/src/rust/engine"
readonly MODE=debug
readonly MODE_FLAG=

readonly NATIVE_ENGINE_VERSION_RESOURCE="${REPO_ROOT}/src/python/pants/engine/subsystem/native_engine_version"

# TODO(John Sirois): Eliminate this replication of BinaryUtil logic internal to pants code when
# https://github.com/pantsbuild/pants/issues/4006 is complete.
readonly KERNEL=$(uname -s | tr '[:upper:]' '[:lower:]')
case "${KERNEL}" in
  linux)
    readonly EXTENSION=so
    readonly OS_ID=linux/$(uname -m)
    ;;
  darwin)
    readonly EXTENSION=dylib
    readonly OS_ID=mac/$(sw_vers -productVersion | cut -d: -f2 | tr -d ' \t' | cut -d. -f1-2)
    ;;
  *)
    die "Unknown kernel ${KERNEL}, cannot bootstrap pants native code!"
    ;;
esac

readonly CACHE_ROOT=${XDG_CACHE_HOME:-$HOME/.cache}/pants
readonly CACHE_TARGET_DIR=${CACHE_ROOT}/bin/native-engine/${OS_ID}

function calculate_current_hash() {
  # Cached and unstaged files, with ignored files excluded.
  git ls-files -c -o --exclude-standard ${NATIVE_ROOT} | \
    git hash-object -t blob --stdin-paths | fingerprint_data
}

function ensure_prerequisites() {
  # The machine may have a non-rustup rust install and we'll respect that, but in case we need to
  # bootstrap via rustup, we pre-emptively add it to the end of the PATH to avoid the user needing
  # to re-exec their SHELL or otherwise have their PATH permanently altered by the rustup script.
  export PATH="$PATH:$HOME/.cargo/bin"
  if [[ -z "$(which cargo 2>/dev/null || true)" ]]
  then
    log "A rust installation could not be found, installing via the instructions at" \
        "https://www.rustup.rs ..."
    local readonly rustup=$(mktemp -t pants.rustup.XXXXX)
    curl https://sh.rustup.rs -sSf > ${rustup}
    sh ${rustup} -y --no-modify-path 1>&2
    rm -f ${rustup}
    # A soft attempt to control the toolchain - if the user came in with their own cargo on that
    # PATH we'll never get here.
    rustup override set stable 1>&2
  fi
}

function bootstrap_native_code() {
  # Bootstraps the native code and sets NATIVE_BOOTSTRAP_HASH to the resulting hash version.
  ensure_prerequisites

  local native_engine_version="$(calculate_current_hash)"
  local target_binary="${CACHE_TARGET_DIR}/${native_engine_version}/native-engine"
  if [ ! -f "${target_binary}" ]
  then
    cargo build --manifest-path ${NATIVE_ROOT}/Cargo.toml ${MODE_FLAG} || die

    # Pick up Cargo.lock changes if any caused by the `cargo build`.
    native_engine_version="$(calculate_current_hash)"
    target_binary="${CACHE_TARGET_DIR}/${native_engine_version}/native-engine"

    mkdir -p $(dirname ${target_binary})
    cp ${NATIVE_ROOT}/target/${MODE}/libengine.${EXTENSION} ${target_binary}

    # NB: The resource file emitted/over-written below is used by the `Native` subsystem to default
    # the native engine library version used by pants. More info can be read here:
    #  src/python/pants/engine/subsystem/README.md
    echo ${native_engine_version} > ${NATIVE_ENGINE_VERSION_RESOURCE}
  fi
}
