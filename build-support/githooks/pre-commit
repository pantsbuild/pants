#!/usr/bin/env bash

# NB: pre-commit runs in the context of GIT_WORK_TREE, ie: pwd == REPO_ROOT

source build-support/common.sh

# Commit hooks set $GIT_DIR by default to .git
# This causes git commands (notably, git rev-parse --show-toplevel) to fail if the script isn't
# running in the git root, as it looks for a .git directory relative to the working directory.
# Explicitly absolute-ify the $GIT_DIR variable so that this doesn't happen.
if [[ -n "${GIT_DIR}" && "${GIT_DIR}" != /* ]]; then
  GIT_DIR="$(pwd)/${GIT_DIR}"
  export GIT_DIR
fi

DIRS_TO_CHECK=(
  src
  tests
  pants-plugins
  examples
  contrib
  # TODO(6071): Add `build-support/bin` once we update the check_header_helper.py script to
  # allow Python 3 headers (i.e. without __future__ and coding=utf-8).
)

# TODO(#7068): Fix all these checks to only act on staged files with
# `git diff --cached --name-only`!

# TODO: test all the scripts in this file in test_git_hooks.py, remove uses of `|| exit 1`, and add an
# integration test!
set -e

# You can use ("$()") with double quotes in zsh, I assume this splits by IFS...
ADDED_FILES=($(./build-support/bin/get_added_files.sh))
MERGE_BASE="$(git_merge_base)"

echo "* Checking packages"
# TODO: Determine the most *hygienic* way to split an array on the command line in portable bash,
# and stick to it.
./build-support/bin/check_packages.sh "${DIRS_TO_CHECK[@]}"

echo "* Checking headers"
./build-support/bin/check_header.py "${DIRS_TO_CHECK[@]}" --files-added "${ADDED_FILES[@]}"

echo "* Checking for banned imports"
./build-support/bin/check_banned_imports.py

echo "* Checking for bad shell patterns"
./build-support/bin/check_shell.sh || exit 1

# When travis builds a tag, it does so in a shallow clone without master fetched, which
# fails in pants changed.
if git rev-parse --verify "${MERGE_BASE}" &>/dev/null; then
  echo "* Checking imports"
  ./build-support/bin/isort.sh || die "To fix import sort order, run \`\"$(pwd)/build-support/bin/isort.sh\" -f\`"

  # TODO(CMLivingston) Make lint use `-q` option again after addressing proper workunit labeling:
  # https://github.com/pantsbuild/pants/issues/6633
  # TODO: add a test case for this while including a pexrc file, as python checkstyle currently fails
  # quite often with a pexrc available.
  echo "* Checking lint"
  ./pants --exclude-target-regexp='testprojects/.*' --changed-parent="${MERGE_BASE}" lint || exit 1

  echo "* Checking types (for build-support)"
  # NB: This task requires Python 3, so we must temporarily override any intepreter constraints
  # set by ci.sh, specifically it setting constraints to Python 2, because those constraints may
  # cause a select-interpreter failure.
  PANTS_PYTHON_SETUP_INTERPRETER_CONSTRAINTS="['CPython>=3.6']" ./pants mypy 'build-support::' || exit 1

  if git diff "${MERGE_BASE}" --name-only | grep '\.rs$' > /dev/null; then
    echo "* Checking formatting of rust files"
    ./build-support/bin/check_rust_formatting.sh || exit 1
    # Clippy happens on a different Travis CI shard because of separate caching concerns.
    # The TRAVIS env var is documented here:
    #   https://docs.travis-ci.com/user/environment-variables/#default-environment-variables
    if [[ "${TRAVIS}" != "true" ]]; then
      echo "* Running cargo clippy"
      ./build-support/bin/check_clippy.sh || exit 1
    fi
    echo "* Checking rust target headers"
    build-support/bin/check_rust_target_headers.sh || exit 1
  fi

  if git diff "${MERGE_BASE}" --name-only | grep build-support/travis > /dev/null; then
    echo "* Checking .travis.yml generation"
    actual_travis_yml=$(<.travis.yml)
    expected_travis_yml=$(./pants --quiet run build-support/travis:generate_travis_yml)
    [ "${expected_travis_yml}" == "${actual_travis_yml}" ] || \
      die "Travis config generator changed but .travis.yml file not regenerated. See top of that file for instructions."
  fi
else
  echo "* Skipping import/lint checks in partial working copy."
fi
