# Copyright 2020 Pants project contributors (see CONTRIBUTORS.md).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

from typing import Dict, Optional, Union

from pants.engine.addresses import Address
from pants.engine.target import (
    COMMON_TARGET_FIELDS,
    BoolField,
    Dependencies,
    IntField,
    InvalidFieldTypeException,
    PrimitiveField,
    Sources,
    StringField,
    Target,
)
from pants.fs.archive import TYPE_NAMES_PRESERVE_SYMLINKS
from pants.util.frozendict import FrozenDict

# -----------------------------------------------------------------------------------------------
# Common fields
# -----------------------------------------------------------------------------------------------


class NodePackageName(StringField):
    """The name of the package.

    If not defined, this will default to the target's name.
    """

    alias = "package_name"
    value: str

    @classmethod
    def compute_value(cls, raw_value: Optional[str], *, address: Address) -> str:
        value_or_default = super().compute_value(raw_value, address=address)
        if value_or_default is None:
            return address.target_name
        return value_or_default


COMMON_NODE_FIELDS = (*COMMON_TARGET_FIELDS, NodePackageName)


# -----------------------------------------------------------------------------------------------
# `node_bundle` target
# -----------------------------------------------------------------------------------------------


class NodeBundleArchiveFormat(StringField):
    """The archive format to use for the generated bundle."""

    alias = "archive"
    value: str
    valid_choices = tuple(sorted(TYPE_NAMES_PRESERVE_SYMLINKS))
    default = "tgz"


class NodeBundleRequestedModule(StringField):
    """The address to the `node_module` you would like to bundle."""

    alias = "node_module"
    required = True


class NodeBundle(Target):
    """A bundle of Node modules."""

    alias = "node_bundle"
    core_fields = (*COMMON_NODE_FIELDS, NodeBundleArchiveFormat, NodeBundleRequestedModule)
    v1_only = True


# -----------------------------------------------------------------------------------------------
# `node_module` target
# -----------------------------------------------------------------------------------------------


class NodePackageManager(StringField):
    """Which package manager to use: 'npm' or 'yarn'."""

    alias = "package_manager"


class NodeBuildScript(StringField):
    """The build script name as defined in package.json.

    All files that are needed for the build script must be included in sources. The script should
    output build results in the directory specified by output_dir.

    If `build_script` is not supplied, the node installation results will be considered as output.
    The output can be archived or included as resources for JVM target.
    """

    alias = "build_script"


class NodeOutputDir(StringField):
    """Relative path to assets generated by build script.

    The path will be preserved in the created JAR if the target is used as a JVM target dependency.
    """

    alias = "output_dir"
    value: str
    default = "dist"


class NodeDevDependencyToggle(BoolField):
    """If a node_module is used as parts of devDependencies and thus should not be included in the
    final bundle or JVM binaries, set this value to True."""

    alias = "dev_dependency"
    default = False


class NodeStyleIgnorePath(StringField):
    """Relative path to file specifying patterns of files to ignore.

    The syntax supported is the same as the .eslintignore/.gitignore syntax.
    """

    alias = "style_ignore_path"
    default = ".eslintignore"


class NodeBinExecutables(PrimitiveField):
    """A map of executable names to their local file name.

    For example, you may specify {'app': './cli.js', 'runner': './scripts/run.sh'}.

    If a single executable is specified (a string), the package name will be the executable name
    and the value will be the local file name per package.json rules. For example,
    './cli.js' is shorthand for {'app': './cli.js'}.
    """

    alias = "bin_executables"
    value: Optional[Union[str, FrozenDict[str, str]]]
    default = None

    @classmethod
    def compute_value(
        cls, raw_value: Optional[Union[str, Dict[str, str]]], *, address: Address
    ) -> Optional[Union[str, FrozenDict[str, str]]]:
        value_or_default = super().compute_value(raw_value, address=address)
        if value_or_default is None:
            return None
        if isinstance(value_or_default, str):
            return value_or_default
        if isinstance(value_or_default, dict):
            return FrozenDict(value_or_default)
        raise InvalidFieldTypeException(
            address,
            cls.alias,
            value_or_default,
            expected_type="either a string or a dictionary of executable name to local file name.",
        )

    def normalized_value(self, *, package_name: NodePackageName) -> FrozenDict[str, str]:
        if self.value is None:
            return FrozenDict({})
        if isinstance(self.value, str):
            return FrozenDict({package_name.value: self.value})
        return self.value


class NodeScope(StringField):
    """Groups related packages together by adding a scope.

    The `@` symbol is typically used for specifying scope in the package name in `package.json`.
    However, Pants target addresses do not allow for `@` in target addresses.

    A repo-level default scope can be added with the `--node-distribution-node-scope` option.
    Any target-level node_scope will override the global node-scope.
    """

    alias = "node_scope"


class NodeModule(Target):
    """A Node module."""

    alias = "node_module"
    core_fields = (
        *COMMON_NODE_FIELDS,
        Sources,
        Dependencies,
        NodePackageManager,
        NodeBuildScript,
        NodeOutputDir,
        NodeDevDependencyToggle,
        NodeStyleIgnorePath,
        NodeBinExecutables,
        NodeScope,
    )
    v1_only = True


# -----------------------------------------------------------------------------------------------
# `node_preinstalled_module` target
# -----------------------------------------------------------------------------------------------


class NodeDependenciesArchiveUrl(StringField):
    """The location of a tar.gz file containing containing a node_modules directory."""

    alias = "dependencies_archive_url"
    required = True


class NodePreinstalledModule(Target):
    """A NodeModule which resolves deps by downloading an archived node_modules directory.

    This target type is experimental and subject to future change or removal.
    """

    alias = "node_preinstalled_module"
    core_fields = (*NodeModule.core_fields, NodeDependenciesArchiveUrl)
    v1_only = True


# -----------------------------------------------------------------------------------------------
# `node_remote_module` target
# -----------------------------------------------------------------------------------------------


class NodeRemoteVersion(StringField):
    """A version constraint for the remote module.

    Any of the forms accepted by NPM, including '' or '*', are acceptable. See:
    https://docs.npmjs.com/files/package.json#dependencies.
    """

    alias = "version"
    value: str
    default = "*"


class NodeRemoteModule(Target):
    """A 3rd-party Node module, e.g. Mocha or React."""

    alias = "node_remote_module"
    core_fields = (*COMMON_NODE_FIELDS, NodeRemoteVersion)
    v1_only = True


# -----------------------------------------------------------------------------------------------
# `node_test` target
# -----------------------------------------------------------------------------------------------


class NodeTestScriptName(StringField):
    """The test's script name in package.json."""

    alias = "script_name"
    value: str
    default = "test"


class NodeTestTimeout(IntField):
    """Timeout the test after this many seconds."""

    alias = "timeout"


class NodeTest(Target):
    """Javascript tests run via a script specified in a package.json file."""

    alias = "node_test"
    core_fields = (
        *COMMON_TARGET_FIELDS,
        Dependencies,
        Sources,
        NodeTestScriptName,
        NodeTestTimeout,
    )
    v1_only = True
