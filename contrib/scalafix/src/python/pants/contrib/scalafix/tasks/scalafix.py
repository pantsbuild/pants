# coding=utf-8
# Copyright 2017 Pants project contributors (see CONTRIBUTORS.md).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

from __future__ import (absolute_import, division, generators, nested_scopes, print_function,
                        unicode_literals, with_statement)

from abc import abstractproperty

from pants.backend.jvm.tasks.scala_rewrite_base import ScalaRewriteBase
from pants.base.exceptions import TaskError
from pants.java.jar.jar_dependency import JarDependency
from pants.option.custom_types import file_option


class ScalaFix(ScalaRewriteBase):
  """Executes the scalafix tool."""

  _SCALAFIX_MAIN = 'scalafix.cli.Cli'
  _SCALA_SOURCE_EXTENSION = '.scala'

  @classmethod
  def register_options(cls, register):
    super(ScalaFix, cls).register_options(register)
    register('--configuration', type=file_option, default=None, fingerprint=True,
             help='The config file to use (in HOCON format).')
    register('--rewrites', default=None, fingerprint=True,
             help='The `rewrites` arg to scalafix: generally a name like `ProcedureSyntax`.')
    cls.register_jvm_tool(register,
                          'scalafix',
                          classpath=[
                            JarDependency(org='ch.epfl.scala', name='scalafix-cli_2.11.11', rev='0.4.2'),
                          ])

  @classmethod
  def prepare(cls, options, round_manager):
    super(ScalaFix, cls).prepare(options, round_manager)
    # TODO: Make conditional.
    round_manager.require_data('runtime_classpath')

  def invoke_tool(self, absolute_root, absolute_sources):
    args = []
    # TODO: Reenable optionally.
    #args.append('--sourceroot={}'.format(absolute_root))
    #args.append('--classpath={}'.format(':'.join(classpath)))
    if self.get_options().configuration:
      args.append('--config={}'.format(self.get_options().configuration))
    if self.get_options().rewrites:
      args.append('--rewrites={}'.format(self.get_options().rewrites))
    if self.get_options().level == 'debug':
      args.append('--verbose')
    args.extend(absolute_sources)

    # Execute.
    return self.runjava(classpath=self.tool_classpath('scalafix'),
                        main=self._SCALAFIX_MAIN,
                        jvm_options=self.get_options().jvm_options,
                        args=args,
                        workunit_name='scalafix')

  @abstractproperty
  def additional_args(self):
    """Additional arguments to the Scalafix command."""


class ScalaFixFix(ScalaFix):
  """Applies fixes generated by scalafix."""

  sideeffecting = True
  additional_args = []

  def process_result(self, result):
    if result != 0:
      raise TaskError(
          '{main} ... failed to fix ({result}) targets.'.format(
            main=self._SCALAFIX_MAIN,
            result=result))


class ScalaFixCheck(ScalaFix):
  """Checks whether any fixes were generated by scalafix."""

  sideeffecting = False
  additional_args = ['--test']

  def process_result(self, result):
    if result != 0:
      raise TaskError('Targets failed scalafix checks.'.format())
