# GENERATED, DO NOT EDIT!
# To change, edit `build-support/bin/generate_github_workflows.py` and run:
#   ./pants run build-support/bin/generate_github_workflows.py


env:
  ARCHFLAGS: -arch arm64e
  PANTS_CONFIG_FILES: +['pants.ci.toml']
  RUST_BACKTRACE: all
jobs:
  build_wheels_macos_arm64:
    env:
      PANTS_REMOTE_CACHE_READ: 'false'
      PANTS_REMOTE_CACHE_WRITE: 'false'
    if: ${{ github.repository_owner == 'pantsbuild' }}
    name: Bootstrap Pants, build wheels and fs_util (macOS-ARM64)
    runs-on:
    - self-hosted
    - macOS
    - ARM64
    steps:
    - name: Check out code
      uses: actions/checkout@v3
      with:
        fetch-depth: 10
    - if: github.event_name == 'push'
      name: Get commit message for branch builds
      run: 'echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV

        echo "$(git log --format=%B -n 1 HEAD)" >> $GITHUB_ENV

        echo "EOF" >> $GITHUB_ENV

        '
    - if: github.event_name == 'pull_request'
      name: Get commit message for PR builds
      run: 'echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV

        echo "$(git log --format=%B -n 1 HEAD^2)" >> $GITHUB_ENV

        echo "EOF" >> $GITHUB_ENV

        '
    - name: Tell Pants to use Python ${{ matrix.python-version }}
      run: 'echo "PY=python${{ matrix.python-version }}" >> $GITHUB_ENV

        echo "PANTS_PYTHON_INTERPRETER_CONSTRAINTS=[''==${{ matrix.python-version
        }}.*'']" >> $GITHUB_ENV

        '
    - name: Cache Rust toolchain
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-rustup-${{ hashFiles('rust-toolchain') }}-v1
        path: '~/.rustup/toolchains/1.61.0-*

          ~/.rustup/update-hashes

          ~/.rustup/settings.toml

          '
    - name: Cache Cargo
      uses: actions/cache@v3
      with:
        key: '${{ runner.os }}-cargo-${{ hashFiles(''rust-toolchain'') }}-${{ hashFiles(''src/rust/engine/Cargo.*'')
          }}-v1

          '
        path: '~/.cargo/registry

          ~/.cargo/git

          '
        restore-keys: '${{ runner.os }}-cargo-${{ hashFiles(''rust-toolchain'') }}-

          '
    - id: get-engine-hash
      name: Get native engine hash
      run: 'echo "::set-output name=hash::$(./build-support/bin/rust/print_engine_hash.sh)"

        '
      shell: bash
    - name: Cache native engine
      uses: actions/cache@v3
      with:
        key: '${{ runner.os }}-engine-${{ steps.get-engine-hash.outputs.hash }}-v1

          '
        path: '.pants

          src/python/pants/engine/internals/native_engine.so

          src/python/pants/engine/internals/native_engine.so.metadata'
    - if: github.event_name != 'pull_request'
      name: Setup toolchain auth
      run: 'echo TOOLCHAIN_AUTH_TOKEN="${{ secrets.TOOLCHAIN_AUTH_TOKEN }}" >> $GITHUB_ENV

        '
    - name: Bootstrap Pants
      run: 'arch -arm64e ./pants --version

        '
    - name: Run smoke tests
      run: 'arch -arm64e ./pants list ::

        arch -arm64e ./pants roots

        arch -arm64e ./pants help goals

        arch -arm64e ./pants help targets

        arch -arm64e ./pants help subsystems

        '
    - if: always()
      name: Upload pants.log
      uses: actions/upload-artifact@v3
      with:
        name: pants-log-bootstrap-macOS-ARM64
        path: .pants.d/pants.log
    - name: Upload native binaries
      uses: actions/upload-artifact@v3
      with:
        name: native_binaries.${ matrix.python-version }.macOS-ARM64
        path: '.pants

          src/python/pants/engine/internals/native_engine.so

          src/python/pants/engine/internals/native_engine.so.metadata'
    - if: (github.event_name == 'push' || !contains(env.COMMIT_MESSAGE, '[ci skip-build-wheels]'))
        && (${{ github.repository_owner == 'pantsbuild' }})
      name: Build wheels
      run: USE_PY39=true arch -arm64e ./build-support/bin/release.sh build-wheels
    - if: github.event_name == 'push'
      name: Build fs_util
      run: USE_PY39=true arch -arm64e ./build-support/bin/release.sh build-fs-util
    - env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      if: github.event_name == 'push'
      name: Deploy to S3
      run: ./build-support/bin/deploy_to_s3.py
    strategy:
      matrix:
        python-version:
        - '3.9'
    timeout-minutes: 60
name: M1 Build
'on':
  pull_request: {}
  push:
    branches-ignore:
    - dependabot/**
