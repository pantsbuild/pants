# GENERATED, DO NOT EDIT!
# To change, edit `src/python/pants_release/generate_github_workflows.py` and run:
#   ./pants run src/python/pants_release/generate_github_workflows.py


concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
env:
  PANTS_CONFIG_FILES: +['pants.ci.toml']
  RUST_BACKTRACE: all
jobs:
  bootstrap_pants_linux_arm64:
    env:
      PANTS_REMOTE_CACHE_READ: 'false'
      PANTS_REMOTE_CACHE_WRITE: 'false'
    if: (github.repository_owner == 'pantsbuild') && (needs.classify_changes.outputs.docs_only != 'true')
    name: Bootstrap Pants, test Rust (Linux-ARM64)
    needs:
    - classify_changes
    runs-on:
    - self-hosted
    - runs-on
    - runner=4cpu-linux-arm64
    - image=ubuntu22-full-arm64-python3.9
    - run-id=${{ github.run_id }}
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 10
    - id: expose-primary-python-so
      name: Expose primary python .so
      run: 'LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:$(realpath $(which python$3.9)/../../lib)"

        echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}" >> $GITHUB_ENV

        '
      shell: bash
    - name: Install Protoc
      uses: arduino/setup-protoc@9b1ee5b22b0a3f1feb8c2ff99b32c89b3c3191e9
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        version: 23.x
    - name: Set rustup profile
      run: rustup set profile default
    - name: Cache Rust toolchain
      uses: actions/cache@v4
      with:
        key: Linux-ARM64-rustup-${{ hashFiles('src/rust/engine/rust-toolchain') }}-v2
        path: '~/.rustup/toolchains/1.80.1-*

          ~/.rustup/update-hashes

          ~/.rustup/settings.toml

          '
    - name: Cache Cargo
      uses: benjyw/rust-cache@461b9f8eee66b575bce78977bf649b8b7a8d53f1
      with:
        cache-bin: 'false'
        shared-key: engine
        workspaces: src/rust/engine
    - id: get-engine-hash
      name: Get native engine hash
      run: echo "hash=$(./build-support/bin/rust/print_engine_hash.sh)" >> $GITHUB_OUTPUT
      shell: bash
    - name: Cache native engine
      uses: actions/cache@v4
      with:
        key: Linux-ARM64-engine-${{ steps.get-engine-hash.outputs.hash }}-v1
        path: 'src/python/pants/bin/native_client

          src/python/pants/engine/internals/native_engine.so

          src/python/pants/engine/internals/native_engine.so.metadata'
    - name: Bootstrap Pants
      run: sleep 3600
    - name: Run smoke tests
      run: './pants list ::

        ./pants roots

        ./pants help goals

        ./pants help targets

        ./pants help subsystems

        '
    - continue-on-error: true
      if: always()
      name: Upload pants.log
      uses: actions/upload-artifact@v4
      with:
        name: logs-bootstrap-Linux-ARM64
        overwrite: 'true'
        path: .pants.d/workdir/*.log
    - name: Upload native binaries
      uses: actions/upload-artifact@v4
      with:
        name: native_binaries.${{ matrix.python-version }}.Linux-ARM64
        path: 'src/python/pants/bin/native_client

          src/python/pants/engine/internals/native_engine.so

          src/python/pants/engine/internals/native_engine.so.metadata'
    - env:
        TMPDIR: ${{ runner.temp }}
      if: needs.classify_changes.outputs.rust == 'true'
      name: Test Rust
      run: ./cargo test --locked --tests -- --nocapture
    timeout-minutes: 60
  build_wheels_linux_arm64:
    container:
      image: ghcr.io/pantsbuild/wheel_build_aarch64:v3-8384c5cf
    env:
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
      MODE: debug
      PANTS_REMOTE_CACHE_READ: 'false'
      PANTS_REMOTE_CACHE_WRITE: 'false'
    if: ((github.repository_owner == 'pantsbuild') && (needs.classify_changes.outputs.release == 'true')) && (needs.classify_changes.outputs.docs_only
      != 'true')
    name: Build wheels (Linux-ARM64)
    needs:
    - classify_changes
    runs-on:
    - self-hosted
    - runs-on
    - runner=4cpu-linux-arm64
    - image=ubuntu22-full-arm64-python3.9
    - run-id=${{ github.run_id }}
    steps:
    - name: Check out code
      uses: actions/checkout@v3
      with:
        fetch-depth: 10
    - name: Configure Git
      run: git config --global safe.directory "$GITHUB_WORKSPACE"
    - name: Install rustup
      run: 'curl --proto ''=https'' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -v -y --default-toolchain none

        echo "${HOME}/.cargo/bin" >> $GITHUB_PATH

        '
    - name: Expose Pythons
      run: 'echo "/opt/python/cp37-cp37m/bin" >> $GITHUB_PATH

        echo "/opt/python/cp38-cp38/bin" >> $GITHUB_PATH

        echo "/opt/python/cp39-cp39/bin" >> $GITHUB_PATH

        '
    - name: Install Protoc
      uses: arduino/setup-protoc@9b1ee5b22b0a3f1feb8c2ff99b32c89b3c3191e9
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        version: 23.x
    - env: {}
      name: Build wheels
      run: ./pants run src/python/pants_release/release.py -- build-wheels
    - env: {}
      name: Build Pants PEX
      run: ./pants package src/python/pants:pants-pex
    - continue-on-error: true
      if: always()
      name: Upload pants.log
      uses: actions/upload-artifact@v3
      with:
        name: logs-wheels-and-pex-Linux-ARM64
        overwrite: 'true'
        path: .pants.d/workdir/*.log
    timeout-minutes: 90
  check_labels:
    if: github.repository_owner == 'pantsbuild'
    name: Ensure PR has a category label
    runs-on:
    - ubuntu-20.04
    steps:
    - env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: github.event_name == 'pull_request'
      name: Ensure category label
      uses: mheap/github-action-required-labels@v4.0.0
      with:
        count: 1
        labels: category:new feature, category:user api change, category:plugin api change, category:performance, category:bugfix,
          category:documentation, category:internal
        mode: exactly
  check_release_notes:
    if: github.repository_owner == 'pantsbuild'
    name: Ensure PR has release notes
    needs:
    - classify_changes
    runs-on:
    - ubuntu-20.04
    steps:
    - env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: github.event_name == 'pull_request' && !needs.classify_changes.outputs.notes
      name: Ensure appropriate label
      uses: mheap/github-action-required-labels@v4.0.0
      with:
        count: 1
        labels: release-notes:not-required, category:internal
        message: "\nPlease do one of:\n\n- add release notes to the appropriate file in `docs/notes`\n\n- label this PR with\
          \ `release-notes:not-required` if it does not need them (for\n  instance, if this is fixing a minor typo in documentation)\n\
          \n- label this PR with `category:internal` if it's an internal change\n\nFeel free to ask a maintainer for help\
          \ if you are not sure what is appropriate!\n"
        mode: minimum
  classify_changes:
    if: github.repository_owner == 'pantsbuild'
    name: Classify changes
    outputs:
      ci_config: ${{ steps.classify.outputs.ci_config }}
      docs: ${{ steps.classify.outputs.docs }}
      docs_only: ${{ steps.classify.outputs.docs_only }}
      notes: ${{ steps.classify.outputs.notes }}
      other: ${{ steps.classify.outputs.other }}
      release: ${{ steps.classify.outputs.release }}
      rust: ${{ steps.classify.outputs.rust }}
    runs-on:
    - ubuntu-20.04
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 10
    - id: classify
      name: Classify changed files
      run: "if [[ -z $GITHUB_EVENT_PULL_REQUEST_BASE_SHA ]]; then\n  # push: compare to the immediate parent, which should\
        \ already be fetched\n  # (checkout's fetch_depth defaults to 10)\n  comparison_sha=$(git rev-parse HEAD^)\nelse\n\
        \  # pull request: compare to the base branch, ensuring that commit exists\n  git fetch --depth=1 \"$GITHUB_EVENT_PULL_REQUEST_BASE_SHA\"\
        \n  comparison_sha=\"$GITHUB_EVENT_PULL_REQUEST_BASE_SHA\"\nfi\necho \"comparison_sha=$comparison_sha\"\n\naffected=$(git\
        \ diff --name-only \"$comparison_sha\" HEAD | python build-support/bin/classify_changed_files.py)\necho \"Affected:\"\
        \nif [[ \"${affected}\" == \"docs\" || \"${affected}\" == \"docs notes\" ]]; then\n  echo \"docs_only=true\" | tee\
        \ -a $GITHUB_OUTPUT\nfi\nfor i in ${affected}; do\n  echo \"${i}=true\" | tee -a $GITHUB_OUTPUT\ndone\n"
  merge_ok:
    if: always()
    name: Merge OK
    needs:
    - set_merge_ok
    runs-on:
    - ubuntu-20.04
    steps:
    - run: "merge_ok=\"${{ needs.set_merge_ok.outputs.merge_ok }}\"\nif [[ \"${merge_ok}\" == \"true\" ]]; then\n    echo\
        \ \"Merge OK\"\n    exit 0\nelse\n    echo \"Merge NOT OK\"\n    exit 1\nfi\n"
  set_merge_ok:
    if: always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    name: Set Merge OK
    needs:
    - classify_changes
    - check_labels
    - check_release_notes
    - bootstrap_pants_linux_arm64
    - build_wheels_linux_arm64
    - check_labels
    - check_release_notes
    - classify_changes
    - test_python_linux_arm64
    outputs:
      merge_ok: ${{ steps.set_merge_ok.outputs.merge_ok }}
    runs-on:
    - ubuntu-20.04
    steps:
    - id: set_merge_ok
      run: echo 'merge_ok=true' >> ${GITHUB_OUTPUT}
  test_python_linux_arm64:
    env: {}
    if: (github.repository_owner == 'pantsbuild') && (needs.classify_changes.outputs.docs_only != 'true')
    name: Test Python (Linux-ARM64)
    needs:
    - bootstrap_pants_linux_arm64
    - classify_changes
    runs-on:
    - self-hosted
    - runs-on
    - runner=4cpu-linux-arm64
    - image=ubuntu22-full-arm64-python3.9
    - run-id=${{ github.run_id }}
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 10
    - name: Install AdoptJDK
      uses: actions/setup-java@v4
      with:
        distribution: adopt
        java-version: '11'
    - id: expose-primary-python-so
      name: Expose primary python .so
      run: 'LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:$(realpath $(which python$3.9)/../../lib)"

        echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}" >> $GITHUB_ENV

        '
      shell: bash
    - name: Download native binaries
      uses: actions/download-artifact@v4
      with:
        name: native_binaries.${{ matrix.python-version }}.Linux-ARM64
        path: src/python/pants
    - name: Make native-client runnable
      run: chmod +x src/python/pants/bin/native_client
    - name: Run Python tests
      run: "./pants --tag=+platform_specific_behavior test :: -- -m platform_specific_behavior || sleep 3600 \n"
    - continue-on-error: true
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      if: always()
      name: Upload test reports
      run: 'export S3_DST=s3://logs.pantsbuild.org/test/reports/Linux-ARM64/$(git show --no-patch --format=%cd --date=format:%Y-%m-%d)/${GITHUB_REF_NAME//\//_}/${GITHUB_RUN_ID}/${GITHUB_RUN_ATTEMPT}/${GITHUB_JOB}

        echo "Uploading test reports to ${S3_DST}"

        ./pants run ./src/python/pants_release/copy_to_s3.py                   --                   --src-prefix=dist/test/reports                   --dst-prefix=${S3_DST}                   --path=""

        '
    - continue-on-error: true
      if: always()
      name: Upload pants.log
      uses: actions/upload-artifact@v4
      with:
        name: logs-python-test-Linux-ARM64
        overwrite: 'true'
        path: .pants.d/workdir/*.log
    timeout-minutes: 90
name: Pull Request CI
'on':
  pull_request: {}
  push:
    branches:
    - main
    - 2.*.x
