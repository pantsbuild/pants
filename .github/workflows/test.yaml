# GENERATED, DO NOT EDIT!
# To change, edit `build-support/bin/generate_github_workflows.py` and run:
#   ./pants run build-support/bin/generate_github_workflows.py


env:
  PANTS_CONFIG_FILES: +['pants.ci.toml']
  RUST_BACKTRACE: all
jobs:
  bootstrap_pants_linux:
    env:
      PANTS_REMOTE_CACHE_READ: 'false'
      PANTS_REMOTE_CACHE_WRITE: 'false'
    name: Bootstrap Pants, test+lint Rust (Linux)
    runs-on: ubuntu-20.04
    steps:
    - name: Check out code
      uses: actions/checkout@v2
      with:
        fetch-depth: 10
    - if: github.event_name == 'push'
      name: Get commit message for branch builds
      run: 'echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV

        echo "$(git log --format=%B -n 1 HEAD)" >> $GITHUB_ENV

        echo "EOF" >> $GITHUB_ENV

        '
    - if: github.event_name == 'pull_request'
      name: Get commit message for PR builds
      run: 'echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV

        echo "$(git log --format=%B -n 1 HEAD^2)" >> $GITHUB_ENV

        echo "EOF" >> $GITHUB_ENV

        '
    - if: github.event_name != 'pull_request'
      name: Setup toolchain auth
      run: 'echo TOOLCHAIN_AUTH_TOKEN="${{ secrets.TOOLCHAIN_AUTH_TOKEN }}" >> $GITHUB_ENV

        '
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Tell Pants to use Python ${{ matrix.python-version }}
      run: 'echo "PY=python${{ matrix.python-version }}" >> $GITHUB_ENV

        echo "PANTS_PYTHON_SETUP_INTERPRETER_CONSTRAINTS=[''==${{ matrix.python-version
        }}.*'']" >> $GITHUB_ENV

        '
    - name: Cache Rust toolchain
      uses: actions/cache@v2
      with:
        key: ${{ runner.os }}-rustup-${{ hashFiles('rust-toolchain') }}
        path: '~/.rustup/toolchains/beta-2021-04-07-*

          ~/.rustup/update-hashes

          ~/.rustup/settings.toml

          '
    - name: Cache Cargo
      uses: actions/cache@v2
      with:
        key: '${{ runner.os }}-cargo-${{ hashFiles(''rust-toolchain'') }}-${{ hashFiles(''src/rust/engine/Cargo.*'')
          }}

          '
        path: '~/.cargo/registry

          ~/.cargo/git

          '
        restore-keys: '${{ runner.os }}-cargo-${{ hashFiles(''rust-toolchain'') }}-

          '
    - name: Cache Pants Virtualenv
      uses: actions/cache@v2
      with:
        key: '${{ runner.os }}-pants-venv-${{ matrix.python-version }}-${{ hashFiles(''pants/3rdparty/python/**'',
          ''pants.toml'') }}

          '
        path: '~/.cache/pants/pants_dev_deps

          '
    - id: get-engine-hash
      name: Get Engine Hash
      run: 'echo "::set-output name=hash::$(./build-support/bin/rust/print_engine_hash.sh)"

        '
      shell: bash
    - name: Cache Native Engine
      uses: actions/cache@v2
      with:
        key: '${{ runner.os }}-engine-${{ steps.get-engine-hash.outputs.hash }}

          '
        path: 'src/python/pants/engine/internals/native_engine.so

          src/python/pants/engine/internals/native_engine.so.metadata'
    - name: Bootstrap Pants
      run: './pants --version

        '
    - name: Run smoke tests
      run: './pants list ::

        ./pants roots

        ./pants help goals

        ./pants help targets

        ./pants help subsystems

        '
    - name: Upload native_engine.so
      uses: actions/upload-artifact@v2
      with:
        name: native_engine.so.${{ matrix.python-version }}.${{ runner.os }}
        path: 'src/python/pants/engine/internals/native_engine.so

          src/python/pants/engine/internals/native_engine.so.metadata'
    - if: '!contains(env.COMMIT_MESSAGE, ''[ci skip-rust]'')'
      name: Test and Lint Rust
      run: 'sudo apt-get install -y pkg-config fuse libfuse-dev

        ./cargo clippy --all

        ./cargo test --all --tests -- --nocapture

        '
    strategy:
      matrix:
        python-version:
        - '3.7'
    timeout-minutes: 40
  bootstrap_pants_macos:
    env:
      PANTS_REMOTE_CACHE_READ: 'false'
      PANTS_REMOTE_CACHE_WRITE: 'false'
    name: Bootstrap Pants, test Rust (macOS)
    runs-on: macos-10.15
    steps:
    - name: Check out code
      uses: actions/checkout@v2
      with:
        fetch-depth: 10
    - if: github.event_name == 'push'
      name: Get commit message for branch builds
      run: 'echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV

        echo "$(git log --format=%B -n 1 HEAD)" >> $GITHUB_ENV

        echo "EOF" >> $GITHUB_ENV

        '
    - if: github.event_name == 'pull_request'
      name: Get commit message for PR builds
      run: 'echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV

        echo "$(git log --format=%B -n 1 HEAD^2)" >> $GITHUB_ENV

        echo "EOF" >> $GITHUB_ENV

        '
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Tell Pants to use Python ${{ matrix.python-version }}
      run: 'echo "PY=python${{ matrix.python-version }}" >> $GITHUB_ENV

        echo "PANTS_PYTHON_SETUP_INTERPRETER_CONSTRAINTS=[''==${{ matrix.python-version
        }}.*'']" >> $GITHUB_ENV

        '
    - name: Cache Rust toolchain
      uses: actions/cache@v2
      with:
        key: ${{ runner.os }}-rustup-${{ hashFiles('rust-toolchain') }}
        path: '~/.rustup/toolchains/beta-2021-04-07-*

          ~/.rustup/update-hashes

          ~/.rustup/settings.toml

          '
    - name: Cache Cargo
      uses: actions/cache@v2
      with:
        key: '${{ runner.os }}-cargo-${{ hashFiles(''rust-toolchain'') }}-${{ hashFiles(''src/rust/engine/Cargo.*'')
          }}

          '
        path: '~/.cargo/registry

          ~/.cargo/git

          '
        restore-keys: '${{ runner.os }}-cargo-${{ hashFiles(''rust-toolchain'') }}-

          '
    - name: Cache Pants Virtualenv
      uses: actions/cache@v2
      with:
        key: '${{ runner.os }}-pants-venv-${{ matrix.python-version }}-${{ hashFiles(''pants/3rdparty/python/**'',
          ''pants.toml'') }}

          '
        path: '~/.cache/pants/pants_dev_deps

          '
    - id: get-engine-hash
      name: Get Engine Hash
      run: 'echo "::set-output name=hash::$(./build-support/bin/rust/print_engine_hash.sh)"

        '
      shell: bash
    - name: Cache Native Engine
      uses: actions/cache@v2
      with:
        key: '${{ runner.os }}-engine-${{ steps.get-engine-hash.outputs.hash }}

          '
        path: 'src/python/pants/engine/internals/native_engine.so

          src/python/pants/engine/internals/native_engine.so.metadata'
    - name: Bootstrap Pants
      run: './pants --version

        '
    - name: Upload native_engine.so
      uses: actions/upload-artifact@v2
      with:
        name: native_engine.so.${{ matrix.python-version }}.${{ runner.os }}
        path: 'src/python/pants/engine/internals/native_engine.so

          src/python/pants/engine/internals/native_engine.so.metadata'
    - env:
        TMPDIR: ${{ runner.temp }}
      if: '!contains(env.COMMIT_MESSAGE, ''[ci skip-rust]'')'
      name: Test Rust
      run: ./cargo test --tests -- --nocapture
    strategy:
      matrix:
        python-version:
        - '3.7'
    timeout-minutes: 40
  build_wheels_linux:
    container: quay.io/pypa/manylinux2014_x86_64:latest
    env:
      PANTS_REMOTE_CACHE_READ: 'false'
      PANTS_REMOTE_CACHE_WRITE: 'false'
    name: Build wheels and fs_util (Linux)
    runs-on: ubuntu-20.04
    steps:
    - name: Check out code
      uses: actions/checkout@v2
      with:
        fetch-depth: 10
    - if: github.event_name == 'push'
      name: Get commit message for branch builds
      run: 'echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV

        echo "$(git log --format=%B -n 1 HEAD)" >> $GITHUB_ENV

        echo "EOF" >> $GITHUB_ENV

        '
    - if: github.event_name == 'pull_request'
      name: Get commit message for PR builds
      run: 'echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV

        echo "$(git log --format=%B -n 1 HEAD^2)" >> $GITHUB_ENV

        echo "EOF" >> $GITHUB_ENV

        '
    - name: Install rustup
      run: 'curl --proto ''=https'' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s --
        -v -y --default-toolchain none

        echo "PATH=${PATH}:${HOME}/.cargo/bin" >> $GITHUB_ENV

        '
    - name: Expose Pythons
      run: echo "PATH=${PATH}:/opt/python/cp37-cp37m/bin:/opt/python/cp38-cp38/bin:/opt/python/cp39-cp39/bin"
        >> $GITHUB_ENV
    - if: github.event_name != 'pull_request'
      name: Setup toolchain auth
      run: 'echo TOOLCHAIN_AUTH_TOKEN="${{ secrets.TOOLCHAIN_AUTH_TOKEN }}" >> $GITHUB_ENV

        '
    - env:
        PANTS_CONFIG_FILES: +['pants.ci.toml', 'pants.no-buildsense.toml']
      if: github.event_name == 'push' || !contains(env.COMMIT_MESSAGE, '[ci skip-build-wheels]')
      name: Build wheels and fs_util
      run: '[[ "${GITHUB_EVENT_NAME}" == "pull_request" ]] && export MODE=debug

        ./build-support/bin/release.sh -n

        USE_PY38=true ./build-support/bin/release.sh -n

        USE_PY39=true ./build-support/bin/release.sh -n

        ./build-support/bin/release.sh -f

        '
    - env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      if: github.event_name == 'push'
      name: Deploy to S3
      run: ./build-support/bin/deploy_to_s3.py
    timeout-minutes: 65
  build_wheels_macos:
    env:
      PANTS_REMOTE_CACHE_READ: 'false'
      PANTS_REMOTE_CACHE_WRITE: 'false'
    name: Build wheels and fs_util (macOS)
    runs-on: macos-10.15
    steps:
    - name: Check out code
      uses: actions/checkout@v2
      with:
        fetch-depth: 10
    - if: github.event_name == 'push'
      name: Get commit message for branch builds
      run: 'echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV

        echo "$(git log --format=%B -n 1 HEAD)" >> $GITHUB_ENV

        echo "EOF" >> $GITHUB_ENV

        '
    - if: github.event_name == 'pull_request'
      name: Get commit message for PR builds
      run: 'echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV

        echo "$(git log --format=%B -n 1 HEAD^2)" >> $GITHUB_ENV

        echo "EOF" >> $GITHUB_ENV

        '
    - if: github.event_name != 'pull_request'
      name: Setup toolchain auth
      run: 'echo TOOLCHAIN_AUTH_TOKEN="${{ secrets.TOOLCHAIN_AUTH_TOKEN }}" >> $GITHUB_ENV

        '
    - name: Expose Pythons
      uses: pantsbuild/actions/expose-pythons@627a8ce25d972afa03da1641be9261bbbe0e3ffe
    - name: Cache Rust toolchain
      uses: actions/cache@v2
      with:
        key: ${{ runner.os }}-rustup-${{ hashFiles('rust-toolchain') }}
        path: '~/.rustup/toolchains/beta-2021-04-07-*

          ~/.rustup/update-hashes

          ~/.rustup/settings.toml

          '
    - name: Cache Cargo
      uses: actions/cache@v2
      with:
        key: '${{ runner.os }}-cargo-${{ hashFiles(''rust-toolchain'') }}-${{ hashFiles(''src/rust/engine/Cargo.*'')
          }}

          '
        path: '~/.cargo/registry

          ~/.cargo/git

          '
        restore-keys: '${{ runner.os }}-cargo-${{ hashFiles(''rust-toolchain'') }}-

          '
    - env:
        ARCHFLAGS: -arch x86_64
        PANTS_CONFIG_FILES: +['pants.ci.toml', 'pants.no-buildsense.toml']
      if: github.event_name == 'push' || !contains(env.COMMIT_MESSAGE, '[ci skip-build-wheels]')
      name: Build wheels and fs_util
      run: '[[ "${GITHUB_EVENT_NAME}" == "pull_request" ]] && export MODE=debug

        ./build-support/bin/release.sh -n

        USE_PY38=true ./build-support/bin/release.sh -n

        USE_PY39=true ./build-support/bin/release.sh -n

        ./build-support/bin/release.sh -f

        '
    - env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      if: github.event_name == 'push'
      name: Deploy to S3
      run: ./build-support/bin/deploy_to_s3.py
    timeout-minutes: 65
  lint_python:
    name: Lint Python and Shell
    needs: bootstrap_pants_linux
    runs-on: ubuntu-20.04
    steps:
    - name: Check out code
      uses: actions/checkout@v2
      with:
        fetch-depth: 10
    - if: github.event_name == 'push'
      name: Get commit message for branch builds
      run: 'echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV

        echo "$(git log --format=%B -n 1 HEAD)" >> $GITHUB_ENV

        echo "EOF" >> $GITHUB_ENV

        '
    - if: github.event_name == 'pull_request'
      name: Get commit message for PR builds
      run: 'echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV

        echo "$(git log --format=%B -n 1 HEAD^2)" >> $GITHUB_ENV

        echo "EOF" >> $GITHUB_ENV

        '
    - if: github.event_name != 'pull_request'
      name: Setup toolchain auth
      run: 'echo TOOLCHAIN_AUTH_TOKEN="${{ secrets.TOOLCHAIN_AUTH_TOKEN }}" >> $GITHUB_ENV

        '
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Tell Pants to use Python ${{ matrix.python-version }}
      run: 'echo "PY=python${{ matrix.python-version }}" >> $GITHUB_ENV

        echo "PANTS_PYTHON_SETUP_INTERPRETER_CONSTRAINTS=[''==${{ matrix.python-version
        }}.*'']" >> $GITHUB_ENV

        '
    - name: Cache Pants Virtualenv
      uses: actions/cache@v2
      with:
        key: '${{ runner.os }}-pants-venv-${{ matrix.python-version }}-${{ hashFiles(''pants/3rdparty/python/**'',
          ''pants.toml'') }}

          '
        path: '~/.cache/pants/pants_dev_deps

          '
    - name: Download native_engine.so
      uses: actions/download-artifact@v2
      with:
        name: native_engine.so.${{ matrix.python-version }}.${{ runner.os }}
        path: src/python/pants/engine/internals/
    - name: Lint
      run: './pants validate ''**''

        ./pants lint typecheck ::

        '
    - if: always()
      name: Upload pants.log
      uses: actions/upload-artifact@v2
      with:
        name: pants-log-lint
        path: .pants.d/pants.log
    strategy:
      matrix:
        python-version:
        - '3.7'
    timeout-minutes: 30
  test_python_linux:
    name: Test Python (Linux)
    needs: bootstrap_pants_linux
    runs-on: ubuntu-20.04
    steps:
    - name: Check out code
      uses: actions/checkout@v2
      with:
        fetch-depth: 10
    - if: github.event_name == 'push'
      name: Get commit message for branch builds
      run: 'echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV

        echo "$(git log --format=%B -n 1 HEAD)" >> $GITHUB_ENV

        echo "EOF" >> $GITHUB_ENV

        '
    - if: github.event_name == 'pull_request'
      name: Get commit message for PR builds
      run: 'echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV

        echo "$(git log --format=%B -n 1 HEAD^2)" >> $GITHUB_ENV

        echo "EOF" >> $GITHUB_ENV

        '
    - if: github.event_name != 'pull_request'
      name: Setup toolchain auth
      run: 'echo TOOLCHAIN_AUTH_TOKEN="${{ secrets.TOOLCHAIN_AUTH_TOKEN }}" >> $GITHUB_ENV

        '
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Tell Pants to use Python ${{ matrix.python-version }}
      run: 'echo "PY=python${{ matrix.python-version }}" >> $GITHUB_ENV

        echo "PANTS_PYTHON_SETUP_INTERPRETER_CONSTRAINTS=[''==${{ matrix.python-version
        }}.*'']" >> $GITHUB_ENV

        '
    - name: Expose Pythons
      uses: pantsbuild/actions/expose-pythons@627a8ce25d972afa03da1641be9261bbbe0e3ffe
    - name: Cache Pants Virtualenv
      uses: actions/cache@v2
      with:
        key: '${{ runner.os }}-pants-venv-${{ matrix.python-version }}-${{ hashFiles(''pants/3rdparty/python/**'',
          ''pants.toml'') }}

          '
        path: '~/.cache/pants/pants_dev_deps

          '
    - name: Download native_engine.so
      uses: actions/download-artifact@v2
      with:
        name: native_engine.so.${{ matrix.python-version }}.${{ runner.os }}
        path: src/python/pants/engine/internals/
    - name: Run Python tests
      run: './pants test ::

        '
    - if: always()
      name: Upload pants.log
      uses: actions/upload-artifact@v2
      with:
        name: pants-log-python-test-linux
        path: .pants.d/pants.log
    strategy:
      matrix:
        python-version:
        - '3.7'
    timeout-minutes: 60
  test_python_macos:
    env:
      ARCHFLAGS: -arch x86_64
    name: Test Python (macOS)
    needs: bootstrap_pants_macos
    runs-on: macos-10.15
    steps:
    - name: Check out code
      uses: actions/checkout@v2
      with:
        fetch-depth: 10
    - if: github.event_name == 'push'
      name: Get commit message for branch builds
      run: 'echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV

        echo "$(git log --format=%B -n 1 HEAD)" >> $GITHUB_ENV

        echo "EOF" >> $GITHUB_ENV

        '
    - if: github.event_name == 'pull_request'
      name: Get commit message for PR builds
      run: 'echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV

        echo "$(git log --format=%B -n 1 HEAD^2)" >> $GITHUB_ENV

        echo "EOF" >> $GITHUB_ENV

        '
    - if: github.event_name != 'pull_request'
      name: Setup toolchain auth
      run: 'echo TOOLCHAIN_AUTH_TOKEN="${{ secrets.TOOLCHAIN_AUTH_TOKEN }}" >> $GITHUB_ENV

        '
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Tell Pants to use Python ${{ matrix.python-version }}
      run: 'echo "PY=python${{ matrix.python-version }}" >> $GITHUB_ENV

        echo "PANTS_PYTHON_SETUP_INTERPRETER_CONSTRAINTS=[''==${{ matrix.python-version
        }}.*'']" >> $GITHUB_ENV

        '
    - name: Expose Pythons
      uses: pantsbuild/actions/expose-pythons@627a8ce25d972afa03da1641be9261bbbe0e3ffe
    - name: Cache Pants Virtualenv
      uses: actions/cache@v2
      with:
        key: '${{ runner.os }}-pants-venv-${{ matrix.python-version }}-${{ hashFiles(''pants/3rdparty/python/**'',
          ''pants.toml'') }}

          '
        path: '~/.cache/pants/pants_dev_deps

          '
    - name: Download native_engine.so
      uses: actions/download-artifact@v2
      with:
        name: native_engine.so.${{ matrix.python-version }}.${{ runner.os }}
        path: src/python/pants/engine/internals/
    - name: Run Python tests
      run: './pants --tag=+platform_specific_behavior test ::

        '
    - if: always()
      name: Upload pants.log
      uses: actions/upload-artifact@v2
      with:
        name: pants-log-python-test-macos
        path: .pants.d/pants.log
    strategy:
      matrix:
        python-version:
        - '3.7'
    timeout-minutes: 20
name: Pull Request CI
'on':
- push
- pull_request
