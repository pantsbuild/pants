name: Auto Cherry-Picker

on:
  # NB: This is safe since we already have merged the PR.
  # See https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
  pull_request_target:
    types: [closed]
    branches: [main]
  workflow_dispatch:
    inputs:
      PR_number:
        description: The PR number to cherry-pick
        type: string
        required: true

jobs:
  prerequisites:
    name: Gather Prerequisites
    if: (github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'needs-cherrypick') ) || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      pr_num: ${{ steps.get-prereqs.outputs.pr_num }}
      merge_commit: ${{ steps.get-prereqs.outputs.merge_commit }}
      milestones: ${{ steps.get-prereqs.outputs.milestones }}
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: npm install semver
      - id: get-prereqs
        name: Get Cherry-Pick prerequisites
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.WORKER_PANTS_CHERRY_PICK_PAT }}
          script: |
            const semver = require("semver");

            const pr_num = "${{ github.event.pull_request.number || inputs.PR_number }}"
            const {data: pull} = await github.rest.pulls.get({
                ...context.repo,
              pull_number: pr_num,
            })
            const target_milestone = pull.milestone.title

            const { data: all_milestones } =
              await github.rest.issues.listMilestones({
                ...context.repo,
                state: "open",
              });
            const sorted_milestones = all_milestones
              .map((milestone) => milestone.title)
              .sort((a, b) => semver.compare(semver.coerce(a), semver.coerce(b)));
            const relevant_milestones = sorted_milestones.slice(
              sorted_milestones.indexOf(target_milestone)
            );

            if (relevant_milestones.length === 0) {
              core.setFailed(`Couldn't find any relevant milestones.`);
            }

            core.setOutput('pr_num', pr_num)
            core.setOutput('merge_commit', pull.merge_commit_sha)
            core.setOutput('milestones', relevant_milestones)

  cherry_picker:
    name: Cherry-Pick
    needs: prerequisites
    runs-on: ubuntu-latest
    strategy:
      matrix:
        milestone: ${{ fromJSON(needs.prerequisites.outputs.milestones) }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          # Always checkout the latest commit of main, for latest changes to the script
          ref: main
          token: ${{ secrets.WORKER_PANTS_CHERRY_PICK_PAT }}
      - name: Create Cherry-Pick Branch
        env:
          GH_TOKEN: ${{ secrets.WORKER_PANTS_CHERRY_PICK_PAT }}
        run: |
          git config --local user.email "pantsbuild+github-automation@gmail.com"
          git config --local user.name "Worker Pants (Pantsbuild GitHub Automation Bot)"

          git fetch --depth=2 origin "${{ needs.prerequisites.outputs.merge_commit }}"
          # NB: If this fetch fails, we assume that means the milestone branch hasn't been created yet
          git fetch --depth 1 origin "${{ matrix.milestone }}" || exit 0

          BRANCH_NAME="cherry-pick-${{ needs.prerequisites.outputs.pr_num }}-to-${{ matrix.milestone }}"
          git checkout -b "$BRANCH_NAME" FETCH_HEAD

          # @TODO: Comment on failure, and add label
          git cherry-pick "${{ needs.prerequisites.outputs.merge_commit }}"

          git push -u origin "$BRANCH_NAME"
          build-support/bin/cherry_pick/make_pr.sh "${{ needs.prerequisites.outputs.pr_num }}" "${{ matrix.milestone }}"

  label-remover:
    name: Remove "needs-cherrypick" label
    needs: [cherry_picker, prerequisites]
    runs-on: ubuntu-latest
    steps:
      - name: Remove label
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.WORKER_PANTS_CHERRY_PICK_PAT }}
          script: |
            github.rest.issues.removeLabel({
              issue_number: ${{ needs.prerequisites.outputs.pr_num }},
              ...context.repo,
              name: 'needs-cherrypick'
            })
